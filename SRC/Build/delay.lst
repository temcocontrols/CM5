C51 COMPILER V9.00   DELAY                                                                 05/08/2013 16:47:34 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DELAY
OBJECT MODULE PLACED IN .\Build\delay.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\SRC\MS_TIMER\delay.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDI
                    -R(..\SRC\FreeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\
                    -;..\SRC\UART\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_C
                    -ard\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\manag
                    -ement\;..\SRC\dhcp\;..\SRC\pppoe\;..\SRC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\S
                    -RC\Scan) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\delay.lst) OBJECT(.\Build\delay.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: delay.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: delay.c,v $
  18           * Revision 1.1.1.1  2006/02/23 00:55:10  borbin
  19           * no message
  20           *
  21           *=============================================================================
  22           */
  23          
  24          /* INCLUDE FILE DECLARATIONS */
  25          #include "reg80390.h"
  26          #include "delay.h"
  27          #include "ax11000_cfg.h"
  28          #include "ax11000.h"
  29          
  30          /* NAMING CONSTANT DECLARATIONS */
  31          #define CLK_100M        100
  32          #define CLK_50M         50
  33          #define CLK_25M         25
  34          
  35          /* LOCAL VARIABLES DECLARATIONS */
  36          static U16_T delay_MsLoop = 1;
  37          static U8_T delay_SysClk = 25;
  38          static U8_T delay_ProgWst = 1;
  39          
  40          /*
  41           * ----------------------------------------------------------------------------
  42           * Function Name: DELAY_Init
  43           * Purpose: Get system clock and program wait state to decide delay loop count.
  44           * Params:
  45           * Returns:
  46           * Note:
  47           * ----------------------------------------------------------------------------
  48           */
  49          void DELAY_Init(void)
  50          {
C51 COMPILER V9.00   DELAY                                                                 05/08/2013 16:47:34 PAGE 2   

  51   1              /* get system clock */
  52   1              switch (AX11000_GetSysClk())
  53   1              {
  54   2                      case SCS_100M :
  55   2                              delay_SysClk = CLK_100M;
  56   2                              break;
  57   2                      case SCS_50M :
  58   2                              delay_SysClk = CLK_50M;
  59   2                              break;
  60   2                      case SCS_25M :
  61   2                              delay_SysClk = CLK_25M;
  62   2                      default:
  63   2                              break;
  64   2              }
  65   1      
  66   1              /* get program wait state */
  67   1              delay_ProgWst = AX11000_GetProgWst() + 1;
  68   1      
  69   1              /* calculate driver loop count for per ms */
  70   1              delay_MsLoop = ((U32_T)delay_SysClk * 1000) / ((U32_T)delay_ProgWst * 11);
  71   1      
  72   1      } /* End of DELAY_Init */
  73          
  74          /*
  75           * ----------------------------------------------------------------------------
  76           * Function Name: DELAY_Us
  77           * Purpose: Delay XXX us.
  78           * Params:
  79           * Returns:
  80           * Note:
  81           * ----------------------------------------------------------------------------
  82           */
  83          void DELAY_Us(U16_T loop)
  84          {       
  85   1              U32_T   count;
  86   1      
  87   1              count = ((U32_T)delay_SysClk * loop) / ((U32_T)delay_ProgWst * 20);
  88   1              if (count > 7)
  89   1                      count -= 7;
  90   1              else
  91   1                      return;
  92   1                      
  93   1              while (count--);
  94   1      
  95   1      } /* End of DELAY_Us */
  96          
  97          /*
  98           *--------------------------------------------------------------------------------
  99           * Function Name: DELAY_Ms
 100           * Purpose : Delay XXX ms
 101           * Params  :
 102           * Returns :
 103           * Note    :
 104           *--------------------------------------------------------------------------------
 105           */
 106          void DELAY_Ms(U16_T loop)
 107          {
 108   1              U16_T   x, y;
 109   1      
 110   1              for (y = 0; y < loop; y++)
 111   1              {
 112   2                      x = delay_MsLoop;
C51 COMPILER V9.00   DELAY                                                                 05/08/2013 16:47:34 PAGE 3   

 113   2                      while (x--);
 114   2              }
 115   1      } /* End of ms_delay*/
 116          
 117          
 118          /* End of delay.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    296    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
