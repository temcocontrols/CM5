C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\Build\pca.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PCA\pca.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\FreeR
                    -TOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UART\;
                    -..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card\;..\SRC\GS
                    -M\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\SRC\
                    -dhcp\;..\SRC\pppoe\;..\SRC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\SRC\Scan) DEFIN
                    -E(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\pca.lst) OBJECT(.\Build\pca.obj)

line level    source

   1          /*
   2           *********************************************************************************
   3           *     Copyright (c) 2005   ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           *********************************************************************************
  10           */
  11          /*================================================================================
  12           * Module Name : pca.c
  13           * Purpose     : This file include PCA interrupt service routine and
  14           *               PCA driver.
  15           * Author      : Robin Lee
  16           * Date        : 2006-06-23
  17           * Notes       :
  18           * $Log: pca.c,v $
  19           * Revision 1.0  2009-01-05 14:03:53+08  wong
  20           * Initial revision
  21           *
  22           *================================================================================
  23           */
  24          
  25          /* INCLUDE FILE DECLARATIONS */
  26          #include        "reg80390.h"
  27          #include        "types.h"
  28          #include        "pca.h"
  29          #include        "pca_cfg.h"
  30          
  31          #if 1
  32          /* STATIC VARIABLE DECLARATIONS */
  33          static U8_T             pcaIntrFlag = 0;
  34          static U16_T    pcaCapVal[5] = {0};
  35          static U16_T    pcaCexVal[5] = {0};
  36          
  37          
  38          /* LOCAL SUBPROGRAM DECLARATIONS */
  39          static void pca_ISR(void);
  40          #if PCA_CAP_POS_ON_MODULE_0
                      static void pca_CapturePosOnModule0(void);
              #endif
  43          #if PCA_CAP_POS_ON_MODULE_1
                      static void pca_CapturePosOnModule1(void);
              #endif
  46          #if PCA_CAP_POS_ON_MODULE_2
                      static void pca_CapturePosOnModule2(void);
              #endif
  49          #if PCA_CAP_POS_ON_MODULE_3
                      static void pca_CapturePosOnModule3(void);
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 2   

              #endif
  52          #if PCA_CAP_POS_ON_MODULE_4
                      static void pca_CapturePosOnModule4(void);
              #endif
  55          
  56          #if PCA_CAP_NEG_ON_MODULE_0
                      static void pca_CaptureNegOnModule0(void);
              #endif
  59          #if PCA_CAP_NEG_ON_MODULE_1
                      static void pca_CaptureNegOnModule1(void);
              #endif
  62          #if PCA_CAP_NEG_ON_MODULE_2
                      static void pca_CaptureNegOnModule2(void);
              #endif
  65          #if PCA_CAP_NEG_ON_MODULE_3
                      static void pca_CaptureNegOnModule3(void);
              #endif
  68          #if PCA_CAP_NEG_ON_MODULE_4
                      static void pca_CaptureNegOnModule4(void);
              #endif
  71          
  72          #if PCA_CAP_POS_NEG_ON_MODULE_0
                      static void pca_CapturePosNegOnModule0(void);
              #endif
  75          #if PCA_CAP_POS_NEG_ON_MODULE_1
                      static void pca_CapturePosNegOnModule1(void);
              #endif
  78          #if PCA_CAP_POS_NEG_ON_MODULE_2
                      static void pca_CapturePosNegOnModule2(void);
              #endif
  81          #if PCA_CAP_POS_NEG_ON_MODULE_3
                      static void pca_CapturePosNegOnModule3(void);
              #endif
  84          #if PCA_CAP_POS_NEG_ON_MODULE_4
                      static void pca_CapturePosNegOnModule4(void);
              #endif
  87          
  88          #if PCA_SW_TIMER_ON_MODULE_0
                      static void pca_SoftwareTimerOnModule0(void);
              #endif
  91          #if PCA_SW_TIMER_ON_MODULE_1
                      static void pca_SoftwareTimerOnModule1(void);
              #endif
  94          #if PCA_SW_TIMER_ON_MODULE_2
                      static void pca_SoftwareTimerOnModule2(void);
              #endif
  97          #if PCA_SW_TIMER_ON_MODULE_3
                      static void pca_SoftwareTimerOnModule3(void);
              #endif
 100          #if PCA_SW_TIMER_ON_MODULE_4
                      static void pca_SoftwareTimerOnModule4(void);
              #endif
 103          
 104          #if PCA_HI_SPEED_OUT_ON_MODULE_0
                      static void pca_HighSpeedOutputOnModule0(void);
              #endif
 107          #if PCA_HI_SPEED_OUT_ON_MODULE_1
                      static void pca_HighSpeedOutputOnModule1(void);
              #endif
 110          #if PCA_HI_SPEED_OUT_ON_MODULE_2
                      static void pca_HighSpeedOutputOnModule2(void);
              #endif
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 3   

 113          #if PCA_HI_SPEED_OUT_ON_MODULE_3
                      static void pca_HighSpeedOutputOnModule3(void);
              #endif
 116          #if PCA_HI_SPEED_OUT_ON_MODULE_4
                      static void pca_HighSpeedOutputOnModule4(void);
              #endif
 119          
 120          #if PCA_8BIT_PWM_ON_MODULE_0
                      static void pca_8bitPwmOnModule0(void);
              #endif
 123          #if PCA_8BIT_PWM_ON_MODULE_1
 124                  static void pca_8bitPwmOnModule1(void);
 125          #endif
 126          #if PCA_8BIT_PWM_ON_MODULE_2
 127                  static void pca_8bitPwmOnModule2(void);
 128          #endif
 129          #if PCA_8BIT_PWM_ON_MODULE_3
 130                  static void pca_8bitPwmOnModule3(void);
 131          #endif
 132          #if PCA_8BIT_PWM_ON_MODULE_4
 133                  static void pca_8bitPwmOnModule4(void);
 134          #endif
 135          
 136          
 137          /* LOCAL SUBPROGRAM BODIES */
 138          
 139          /*
 140           *--------------------------------------------------------------------------------
 141           * static void PcaISR(void)
 142           * Purpose : 
 143           * Params  :
 144           * Returns :
 145           * Note    :
 146           *--------------------------------------------------------------------------------
 147           */
 148          static void pca_ISR(void) interrupt 8 //use interrupt 3 (0x43)
 149          {
 150   1              pcaIntrFlag = CCON & (PCA_CCF0|PCA_CCF1|PCA_CCF2|PCA_CCF3|PCA_CCF4|PCA_CF);
 151   1      
 152   1      #if PCA_CAP_POS_ON_MODULE_0
                      pca_CapturePosOnModule0();
              #endif
 155   1      #if PCA_CAP_POS_ON_MODULE_1
                      pca_CapturePosOnModule1();
              #endif
 158   1      #if PCA_CAP_POS_ON_MODULE_2
                      pca_CapturePosOnModule2();
              #endif
 161   1      #if PCA_CAP_POS_ON_MODULE_3
                      pca_CapturePosOnModule3();
              #endif
 164   1      #if PCA_CAP_POS_ON_MODULE_4
                      pca_CapturePosOnModule4();
              #endif
 167   1      
 168   1      #if PCA_CAP_NEG_ON_MODULE_0
                      pca_CaptureNegOnModule0();
              #endif
 171   1      #if PCA_CAP_NEG_ON_MODULE_1
                      pca_CaptureNegOnModule1();
              #endif
 174   1      #if PCA_CAP_NEG_ON_MODULE_2
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 4   

                      pca_CaptureNegOnModule2();
              #endif
 177   1      #if PCA_CAP_NEG_ON_MODULE_3
                      pca_CaptureNegOnModule3();
              #endif
 180   1      #if PCA_CAP_NEG_ON_MODULE_4
                      pca_CaptureNegOnModule4();
              #endif
 183   1      
 184   1      #if PCA_CAP_POS_NEG_ON_MODULE_0
                      pca_CapturePosNegOnModule0();
              #endif
 187   1      #if PCA_CAP_POS_NEG_ON_MODULE_1
                      pca_CapturePosNegOnModule1();
              #endif
 190   1      #if PCA_CAP_POS_NEG_ON_MODULE_2
                      pca_CapturePosNegOnModule2();
              #endif
 193   1      #if PCA_CAP_POS_NEG_ON_MODULE_3
                      pca_CapturePosNegOnModule3();
              #endif
 196   1      #if PCA_CAP_POS_NEG_ON_MODULE_4
                      pca_CapturePosNegOnModule4();
              #endif
 199   1      
 200   1      #if PCA_SW_TIMER_ON_MODULE_0
                      pca_SoftwareTimerOnModule0();
              #endif
 203   1      #if PCA_SW_TIMER_ON_MODULE_1
                      pca_SoftwareTimerOnModule1();
              #endif
 206   1      #if PCA_SW_TIMER_ON_MODULE_2
                      pca_SoftwareTimerOnModule2();
              #endif
 209   1      #if PCA_SW_TIMER_ON_MODULE_3
                      pca_SoftwareTimerOnModule3();
              #endif
 212   1      #if PCA_SW_TIMER_ON_MODULE_4
                      pca_SoftwareTimerOnModule4();
              #endif
 215   1      
 216   1      #if PCA_HI_SPEED_OUT_ON_MODULE_0
                      pca_HighSpeedOutputOnModule0();
              #endif
 219   1      #if PCA_HI_SPEED_OUT_ON_MODULE_1
                      pca_HighSpeedOutputOnModule1();
              #endif
 222   1      #if PCA_HI_SPEED_OUT_ON_MODULE_2
                      pca_HighSpeedOutputOnModule2();
              #endif
 225   1      #if PCA_HI_SPEED_OUT_ON_MODULE_3
                      pca_HighSpeedOutputOnModule3();
              #endif
 228   1      #if PCA_HI_SPEED_OUT_ON_MODULE_4
                      pca_HighSpeedOutputOnModule4();
              #endif
 231   1      
 232   1      #if PCA_8BIT_PWM_ON_MODULE_0
                      pca_8bitPwmOnModule0();
              #endif
 235   1      #if PCA_8BIT_PWM_ON_MODULE_1
 236   1              pca_8bitPwmOnModule1();
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 5   

 237   1      #endif
 238   1      #if PCA_8BIT_PWM_ON_MODULE_2
 239   1              pca_8bitPwmOnModule2();
 240   1      #endif
 241   1      #if PCA_8BIT_PWM_ON_MODULE_3
 242   1              pca_8bitPwmOnModule3();
 243   1      #endif
 244   1      #if PCA_8BIT_PWM_ON_MODULE_4
 245   1              pca_8bitPwmOnModule4();
 246   1      #endif
 247   1      }
 248          
 249          /*
 250           *--------------------------------------------------------------------------------
 251           * static void pca_CapturePosOnModule0(void)
 252           * Purpose : 
 253           * Params  :
 254           * Returns :
 255           * Note    :
 256           *--------------------------------------------------------------------------------
 257           */
 258          #if PCA_CAP_POS_ON_MODULE_0
              static void pca_CapturePosOnModule0(void)
              {
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              pcaIntrFlag &= ~PCA_CCF0;
                              
                              pcaCapVal[PCA_MODULE0] = (U16_T)CCAPL0 | ((U16_T)CCAPH0 << 8);
                      }
              }
              #endif
 269          
 270          /*
 271           *--------------------------------------------------------------------------------
 272           * static void pca_CapturePosOnModule1(void)
 273           * Purpose : 
 274           * Params  :
 275           * Returns :
 276           * Note    :
 277           *--------------------------------------------------------------------------------
 278           */
 279          #if PCA_CAP_POS_ON_MODULE_1
              static void pca_CapturePosOnModule1(void)
              {
                      if (pcaIntrFlag & PCA_CCF1)
                      {
                              pcaIntrFlag &= ~PCA_CCF1;
                              
                              pcaCapVal[PCA_MODULE1] = (U16_T)CCAPL1 | ((U16_T)CCAPH1 << 8);
                      }
              }
              #endif
 290          
 291          /*
 292           *--------------------------------------------------------------------------------
 293           * static void pca_CapturePosOnModule2(void)
 294           * Purpose : 
 295           * Params  :
 296           * Returns :
 297           * Note    :
 298           *--------------------------------------------------------------------------------
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 6   

 299           */
 300          #if PCA_CAP_POS_ON_MODULE_2
              static void pca_CapturePosOnModule2(void)
              {
                      if (pcaIntrFlag & PCA_CCF2)
                      {
                              pcaIntrFlag &= ~PCA_CCF2;
                              
                              pcaCapVal[PCA_MODULE2] = (U16_T)CCAPL2 | ((U16_T)CCAPH2 << 8);
                      }
              }
              #endif
 311          
 312          /*
 313           *--------------------------------------------------------------------------------
 314           * static void pca_CapturePosOnModule3(void)
 315           * Purpose : 
 316           * Params  :
 317           * Returns :
 318           * Note    :
 319           *--------------------------------------------------------------------------------
 320           */
 321          #if PCA_CAP_POS_ON_MODULE_3
              static void pca_CapturePosOnModule3(void)
              {
                      if (pcaIntrFlag & PCA_CCF3)
                      {
                              pcaIntrFlag &= ~PCA_CCF3;
                              
                              pcaCapVal[PCA_MODULE3] = (U16_T)CCAPL3 | ((U16_T)CCAPH3 << 8);
                      }
              }
              #endif
 332          
 333          /*
 334           *--------------------------------------------------------------------------------
 335           * static void pca_CapturePosOnModule4(void)
 336           * Purpose : 
 337           * Params  :
 338           * Returns :
 339           * Note    :
 340           *--------------------------------------------------------------------------------
 341           */
 342          #if PCA_CAP_POS_ON_MODULE_4
              static void pca_CapturePosOnModule4(void)
              {
                      if (pcaIntrFlag & PCA_CCF4)
                      {
                              pcaIntrFlag &= ~PCA_CCF4;
                              
                              pcaCapVal[PCA_MODULE4] = (U16_T)CCAPL4 | ((U16_T)CCAPH4 << 8);
                      }
              }
              #endif
 353          
 354          /*
 355           *--------------------------------------------------------------------------------
 356           * static void pca_CaptureNegOnModule0(void)
 357           * Purpose : 
 358           * Params  :
 359           * Returns :
 360           * Note    :
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 7   

 361           *--------------------------------------------------------------------------------
 362           */
 363          #if PCA_CAP_NEG_ON_MODULE_0
              static void pca_CaptureNegOnModule0(void)
              {
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              pcaIntrFlag &= ~PCA_CCF0;
              
                              pcaCapVal[PCA_MODULE0] = (U16_T)CCAPL0 | ((U16_T)CCAPH0 << 8);
                      }
              }
              #endif
 374          
 375          /*
 376           *--------------------------------------------------------------------------------
 377           * static void pca_CaptureNegOnModule1(void)
 378           * Purpose : 
 379           * Params  :
 380           * Returns :
 381           * Note    :
 382           *--------------------------------------------------------------------------------
 383           */
 384          #if PCA_CAP_NEG_ON_MODULE_1
              static void pca_CaptureNegOnModule1(void)
              {
                      if (pcaIntrFlag & PCA_CCF1)
                      {
                              pcaIntrFlag &= ~PCA_CCF1;
              
                              pcaCapVal[PCA_MODULE1] = (U16_T)CCAPL1 | ((U16_T)CCAPH1 << 8);
                      }
              }
              #endif
 395          
 396          /*
 397           *--------------------------------------------------------------------------------
 398           * static void pca_CaptureNegOnModule2(void)
 399           * Purpose : 
 400           * Params  :
 401           * Returns :
 402           * Note    :
 403           *--------------------------------------------------------------------------------
 404           */
 405          #if PCA_CAP_NEG_ON_MODULE_2
              static void pca_CaptureNegOnModule2(void)
              {
                      if (pcaIntrFlag & PCA_CCF2)
                      {
                              pcaIntrFlag &= ~PCA_CCF2;
              
                              pcaCapVal[PCA_MODULE2] = (U16_T)CCAPL2 | ((U16_T)CCAPH2 << 8);
                      }
              }
              #endif
 416          
 417          /*
 418           *--------------------------------------------------------------------------------
 419           * static void pca_CaptureNegOnModule3(void)
 420           * Purpose : 
 421           * Params  :
 422           * Returns :
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 8   

 423           * Note    :
 424           *--------------------------------------------------------------------------------
 425           */
 426          #if PCA_CAP_NEG_ON_MODULE_3
              static void pca_CaptureNegOnModule3(void)
              {
                      if (pcaIntrFlag & PCA_CCF3)
                      {
                              pcaIntrFlag &= ~PCA_CCF3;
              
                              pcaCapVal[PCA_MODULE3] = (U16_T)CCAPL3 | ((U16_T)CCAPH3 << 8);
                      }
              }
              #endif
 437          
 438          /*
 439           *--------------------------------------------------------------------------------
 440           * static void pca_CaptureNegOnModule4(void)
 441           * Purpose : 
 442           * Params  :
 443           * Returns :
 444           * Note    :
 445           *--------------------------------------------------------------------------------
 446           */
 447          #if PCA_CAP_NEG_ON_MODULE_4
              static void pca_CaptureNegOnModule4(void)
              {
                      if (pcaIntrFlag & PCA_CCF4)
                      {
                              pcaIntrFlag &= ~PCA_CCF4;
              
                              pcaCapVal[PCA_MODULE4] = (U16_T)CCAPL4 | ((U16_T)CCAPH4 << 8);
                      }
              }
              #endif
 458          
 459          /*
 460           *--------------------------------------------------------------------------------
 461           * static void pca_CapturePosNegOnModule0(void)
 462           * Purpose :
 463           * Params  :
 464           * Returns :
 465           * Note    :
 466           *--------------------------------------------------------------------------------
 467           */
 468          #if PCA_CAP_POS_NEG_ON_MODULE_0
              static void pca_CapturePosNegOnModule0(void)
              {
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              pcaIntrFlag &= ~PCA_CCF0;
              
                              pcaCapVal[PCA_MODULE0] = (U16_T)CCAPL0 | ((U16_T)CCAPH0 << 8);
                      }
              }
              #endif
 479          
 480          /*
 481           *--------------------------------------------------------------------------------
 482           * static void pca_CapturePosNegOnModule1(void)
 483           * Purpose :
 484           * Params  :
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 9   

 485           * Returns :
 486           * Note    :
 487           *--------------------------------------------------------------------------------
 488           */
 489          #if PCA_CAP_POS_NEG_ON_MODULE_1
              static void pca_CapturePosNegOnModule1(void)
              {
                      if (pcaIntrFlag & PCA_CCF1)
                      {
                              pcaIntrFlag &= ~PCA_CCF1;
              
                              pcaCapVal[PCA_MODULE1] = (U16_T)CCAPL1 | ((U16_T)CCAPH1 << 8);
                      }
              }
              #endif
 500          
 501          /*
 502           *--------------------------------------------------------------------------------
 503           * static void pca_CapturePosNegOnModule2(void)
 504           * Purpose :
 505           * Params  :
 506           * Returns :
 507           * Note    :
 508           *--------------------------------------------------------------------------------
 509           */
 510          #if PCA_CAP_POS_NEG_ON_MODULE_2
              static void pca_CapturePosNegOnModule2(void)
              {
                      if (pcaIntrFlag & PCA_CCF2)
                      {
                              pcaIntrFlag &= ~PCA_CCF2;
              
                              pcaCapVal[PCA_MODULE2] = (U16_T)CCAPL2 | ((U16_T)CCAPH2 << 8);
                      }
              }
              #endif
 521          
 522          /*
 523           *--------------------------------------------------------------------------------
 524           * static void pca_CapturePosNegOnModule3(void)
 525           * Purpose :
 526           * Params  :
 527           * Returns :
 528           * Note    :
 529           *--------------------------------------------------------------------------------
 530           */
 531          #if PCA_CAP_POS_NEG_ON_MODULE_3
              static void pca_CapturePosNegOnModule3(void)
              {
                      if (pcaIntrFlag & PCA_CCF3)
                      {
                              pcaIntrFlag &= ~PCA_CCF3;
              
                              pcaCapVal[PCA_MODULE3] = (U16_T)CCAPL3 | ((U16_T)CCAPH3 << 8);
                      }
              }
              #endif
 542          
 543          /*
 544           *--------------------------------------------------------------------------------
 545           * static void pca_CapturePosNegOnModule4(void)
 546           * Purpose :
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 10  

 547           * Params  :
 548           * Returns :
 549           * Note    :
 550           *--------------------------------------------------------------------------------
 551           */
 552          #if PCA_CAP_POS_NEG_ON_MODULE_4
              static void pca_CapturePosNegOnModule4(void)
              {
                      if (pcaIntrFlag & PCA_CCF4)
                      {
                              pcaIntrFlag &= ~PCA_CCF4;
              
                              pcaCapVal[PCA_MODULE4] = (U16_T)CCAPL4 | ((U16_T)CCAPH4 << 8);
                      }
              }
              #endif
 563          
 564          /*
 565           *--------------------------------------------------------------------------------
 566           * static void pca_SoftwareTimerOnModule0(void)
 567           * Purpose :
 568           * Params  :
 569           * Returns :
 570           * Note    :
 571           *--------------------------------------------------------------------------------
 572           */
 573          #if PCA_SW_TIMER_ON_MODULE_0
              static void pca_SoftwareTimerOnModule0(void)
              {
                      U16_T   tCount = 0;
              
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              EINT3 = 0;
                              pcaIntrFlag &= ~PCA_CCF0;
              
                              tCount = (U16_T)CCAPL0 | ((U16_T)CCAPH0 << 8);
                              tCount += PCA_SW_TIMER_TRIG_COUNT;
              
                              CCAPL0 = (U8_T)tCount;
                              CCAPH0 = (U8_T)(tCount >> 8);
                              EINT3 = 1;
                      }
              }
              #endif
 592          
 593          /*
 594           *--------------------------------------------------------------------------------
 595           * static void pca_SoftwareTimerOnModule1(void)
 596           * Purpose :
 597           * Params  :
 598           * Returns :
 599           * Note    :
 600           *--------------------------------------------------------------------------------
 601           */
 602          #if PCA_SW_TIMER_ON_MODULE_1
              static void pca_SoftwareTimerOnModule1(void)
              {
                      U16_T   tCount = 0;
              
                      if (pcaIntrFlag & PCA_CCF1)
                      {
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 11  

                              EINT3 = 0;
                              pcaIntrFlag &= ~PCA_CCF1;
              
                              tCount = (U16_T)CCAPL1 | ((U16_T)CCAPH1 << 8);
                              tCount += PCA_SW_TIMER_TRIG_COUNT;
              
                              CCAPL1 = (U8_T)tCount;
                              CCAPH1 = (U8_T)(tCount >> 8);
                              EINT3 = 1;
                      }
              }
              #endif
 621          
 622          /*
 623           *--------------------------------------------------------------------------------
 624           * static void pca_SoftwareTimerOnModule2(void)
 625           * Purpose :
 626           * Params  :
 627           * Returns :
 628           * Note    :
 629           *--------------------------------------------------------------------------------
 630           */
 631          #if PCA_SW_TIMER_ON_MODULE_2
              static void pca_SoftwareTimerOnModule2(void)
              {
                      U16_T   tCount = 0;
              
                      if (pcaIntrFlag & PCA_CCF2)
                      {
                              EINT3 = 0;
                              pcaIntrFlag &= ~PCA_CCF2;
              
                              tCount = (U16_T)CCAPL2 | ((U16_T)CCAPH2 << 8);
                              tCount += PCA_SW_TIMER_TRIG_COUNT;
              
                              CCAPL2 = (U8_T)tCount;
                              CCAPH2 = (U8_T)(tCount >> 8);
                              EINT3 = 1;
                      }
              }
              #endif
 650          
 651          /*
 652           *--------------------------------------------------------------------------------
 653           * static void pca_SoftwareTimerOnModule3(void)
 654           * Purpose :
 655           * Params  :
 656           * Returns :
 657           * Note    :
 658           *--------------------------------------------------------------------------------
 659           */
 660          #if PCA_SW_TIMER_ON_MODULE_3
              static void pca_SoftwareTimerOnModule3(void)
              {
                      U16_T   tCount = 0;
              
                      if (pcaIntrFlag & PCA_CCF3)
                      {
                              EINT3 = 0;
                              pcaIntrFlag &= ~PCA_CCF3;
              
                              tCount = (U16_T)CCAPL3 | ((U16_T)CCAPH3 << 8);
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 12  

                              tCount += PCA_SW_TIMER_TRIG_COUNT;
              
                              CCAPL3 = (U8_T)tCount;
                              CCAPH3 = (U8_T)(tCount >> 8);
                              EINT3 = 1;
                      }
              }
              #endif
 679          
 680          /*
 681           *--------------------------------------------------------------------------------
 682           * static void pca_SoftwareTimerOnModule4(void)
 683           * Purpose :
 684           * Params  :
 685           * Returns :
 686           * Note    :
 687           *--------------------------------------------------------------------------------
 688           */
 689          #if PCA_SW_TIMER_ON_MODULE_4
              static void pca_SoftwareTimerOnModule4(void)
              {
                      U16_T   tCount = 0;
              
                      if (pcaIntrFlag & PCA_CCF4)
                      {
                              EINT3 = 0;
                              pcaIntrFlag &= ~PCA_CCF4;
              
                              tCount = (U16_T)CCAPL4 | ((U16_T)CCAPH4 << 8);
                              tCount += PCA_SW_TIMER_TRIG_COUNT;
              
                              CCAPL4 = (U8_T)tCount;
                              CCAPH4 = (U8_T)(tCount >> 8);
                              EINT3 = 1;
                      }
              }
              #endif
 708          
 709          /*
 710           *--------------------------------------------------------------------------------
 711           * static void pca_HighSpeedOutputOnModule0(void)
 712           * Purpose : 
 713           * Params  :
 714           * Returns :
 715           * Note    :
 716           *--------------------------------------------------------------------------------
 717           */
 718          #if PCA_HI_SPEED_OUT_ON_MODULE_0
              static void pca_HighSpeedOutputOnModule0(void)
              {
                      U16_T   count;
              
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              pcaIntrFlag &= ~PCA_CCF0;
                              count = (U16_T)CCAPH0 << 8 | (U16_T)CCAPL0 ;
                              count += PCA_HIGH_SPEED_OUT_TRIG_COUNT;
                              CCAPL0 = (U8_T)count;
                              CCAPH0 = (U8_T)(count >> 8);
                      }
              }
              #endif
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 13  

 733          
 734          /*
 735           *--------------------------------------------------------------------------------
 736           * static void pca_HighSpeedOutputOnModule1(void)
 737           * Purpose : 
 738           * Params  :
 739           * Returns :
 740           * Note    :
 741           *--------------------------------------------------------------------------------
 742           */
 743          #if PCA_HI_SPEED_OUT_ON_MODULE_1
              static void pca_HighSpeedOutputOnModule1(void)
              {
                      U16_T   count;
              
                      if (pcaIntrFlag & PCA_CCF1)
                      {
                              pcaIntrFlag &= ~PCA_CCF1;
                              count = (U16_T)CCAPH1 << 8 | (U16_T)CCAPL1 ;
                              count += PCA_HIGH_SPEED_OUT_TRIG_COUNT;
                              CCAPL1 = (U8_T)count;
                              CCAPH1 = (U8_T)(count >> 8);
                      }
              }
              #endif
 758          
 759          /*
 760           *--------------------------------------------------------------------------------
 761           * static void pca_HighSpeedOutputOnModule2(void)
 762           * Purpose : 
 763           * Params  :
 764           * Returns :
 765           * Note    :
 766           *--------------------------------------------------------------------------------
 767           */
 768          #if PCA_HI_SPEED_OUT_ON_MODULE_2
              static void pca_HighSpeedOutputOnModule2(void)
              {
                      U16_T   count;
              
                      if (pcaIntrFlag & PCA_CCF2)
                      {
                              pcaIntrFlag &= ~PCA_CCF2;
                              count = (U16_T)CCAPH2 << 8 | (U16_T)CCAPL2 ;
                              count += PCA_HIGH_SPEED_OUT_TRIG_COUNT;
                              CCAPL2 = (U8_T)count;
                              CCAPH2 = (U8_T)(count >> 8);
                      }
              }
              #endif
 783          
 784          /*
 785           *--------------------------------------------------------------------------------
 786           * static void pca_HighSpeedOutputOnModule3(void)
 787           * Purpose : 
 788           * Params  :
 789           * Returns :
 790           * Note    :
 791           *--------------------------------------------------------------------------------
 792           */
 793          #if PCA_HI_SPEED_OUT_ON_MODULE_3
              static void pca_HighSpeedOutputOnModule3(void)
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 14  

              {
                      U16_T   count;
              
                      if (pcaIntrFlag & PCA_CCF3)
                      {
                              pcaIntrFlag &= ~PCA_CCF3;
                              count = (U16_T)CCAPH3 << 8 | (U16_T)CCAPL3 ;
                              count += PCA_HIGH_SPEED_OUT_TRIG_COUNT;
                              CCAPL3 = (U8_T)count;
                              CCAPH3 = (U8_T)(count >> 8);
                      }
              }
              #endif
 808          
 809          /*
 810           *--------------------------------------------------------------------------------
 811           * static void pca_HighSpeedOutputOnModule4(void)
 812           * Purpose : 
 813           * Params  :
 814           * Returns :
 815           * Note    :
 816           *--------------------------------------------------------------------------------
 817           */
 818          #if PCA_HI_SPEED_OUT_ON_MODULE_4
              static void pca_HighSpeedOutputOnModule4(void)
              {
                      U16_T   count;
              
                      if (pcaIntrFlag & PCA_CCF4)
                      {
                              pcaIntrFlag &= ~PCA_CCF4;
                              count = (U16_T)CCAPH4 << 8 | (U16_T)CCAPL4 ;
                              count += PCA_HIGH_SPEED_OUT_TRIG_COUNT;
                              CCAPL4 = (U8_T)count;
                              CCAPH4 = (U8_T)(count >> 8);
                      }
              }
              #endif
 833          
 834          /*
 835           *--------------------------------------------------------------------------------
 836           * static void pca_8bitPwmOnModule0(void)
 837           * Purpose :
 838           * Params  :
 839           * Returns :
 840           * Note    :
 841           *--------------------------------------------------------------------------------
 842           */
 843          #if PCA_8BIT_PWM_ON_MODULE_0
              static void pca_8bitPwmOnModule0(void)
              {
                      if (pcaIntrFlag & PCA_CCF0)
                      {
                              pcaIntrFlag &= ~PCA_CCF0;
              
                              pcaCexVal[PCA_MODULE0] = (U16_T)CCAPL0 | ((U16_T)CCAPH0 << 8);
                      }
              }
              #endif
 854          
 855          /*
 856           *--------------------------------------------------------------------------------
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 15  

 857           * static void pca_8bitPwmOnModule1(void)
 858           * Purpose :
 859           * Params  :
 860           * Returns :
 861           * Note    :
 862           *--------------------------------------------------------------------------------
 863           */
 864          #if PCA_8BIT_PWM_ON_MODULE_1
 865          static void pca_8bitPwmOnModule1(void)
 866          {
 867   1              if (pcaIntrFlag & PCA_CCF1)
 868   1              {
 869   2                      pcaIntrFlag &= ~PCA_CCF1;
 870   2      
 871   2                      pcaCexVal[PCA_MODULE1] = (U16_T)CCAPL1 | ((U16_T)CCAPH1 << 8);
 872   2              }
 873   1      }
 874          #endif
 875          
 876          /*
 877           *--------------------------------------------------------------------------------
 878           * static void pca_8bitPwmOnModule2(void)
 879           * Purpose :
 880           * Params  :
 881           * Returns :
 882           * Note    :
 883           *--------------------------------------------------------------------------------
 884           */
 885          #if PCA_8BIT_PWM_ON_MODULE_2
 886          static void pca_8bitPwmOnModule2(void)
 887          {
 888   1              if (pcaIntrFlag & PCA_CCF2)
 889   1              {
 890   2                      pcaIntrFlag &= ~PCA_CCF2;
 891   2      
 892   2                      pcaCexVal[PCA_MODULE2] = (U16_T)CCAPL2 | ((U16_T)CCAPH2 << 8);
 893   2              }
 894   1      }
 895          #endif
 896          
 897          /*
 898           *--------------------------------------------------------------------------------
 899           * static void pca_8bitPwmOnModule3(void)
 900           * Purpose :
 901           * Params  :
 902           * Returns :
 903           * Note    :
 904           *--------------------------------------------------------------------------------
 905           */
 906          #if PCA_8BIT_PWM_ON_MODULE_3
 907          static void pca_8bitPwmOnModule3(void)
 908          {
 909   1              if (pcaIntrFlag & PCA_CCF3)
 910   1              {
 911   2                      pcaIntrFlag &= ~PCA_CCF3;
 912   2      
 913   2                      pcaCexVal[PCA_MODULE3] = (U16_T)CCAPL3 | ((U16_T)CCAPH3 << 8);
 914   2              }
 915   1      }
 916          #endif
 917          
 918          /*
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 16  

 919           *--------------------------------------------------------------------------------
 920           * static void pca_8bitPwmOnModule4(void)
 921           * Purpose :
 922           * Params  :
 923           * Returns :
 924           * Note    :
 925           *--------------------------------------------------------------------------------
 926           */
 927          #if PCA_8BIT_PWM_ON_MODULE_4
 928          static void pca_8bitPwmOnModule4(void)
 929          {
 930   1              if (pcaIntrFlag & PCA_CCF4)
 931   1              {
 932   2                      pcaIntrFlag &= ~PCA_CCF4;
 933   2      
 934   2                      pcaCexVal[PCA_MODULE4] = (U16_T)CCAPL4 | ((U16_T)CCAPH4 << 8);
 935   2              }
 936   1      }
 937          #endif
 938          
 939          
 940          /* EXPORTED SUBPROGRAM BODIES */
 941          
 942          /*
 943           *--------------------------------------------------------------------------------
 944           * void PCA_ValueInit(void)
 945           * Purpose : Initial all global values in PCA module.
 946           * Params  : none
 947           * Returns : none
 948           * Note    :
 949           *--------------------------------------------------------------------------------
 950           */
 951          void PCA_ValueInit(void)
 952          {
 953   1              U8_T    i;
 954   1      
 955   1              for (i=0 ; i<5 ; i++)
 956   1              {
 957   2                      pcaCapVal[i] = 0;
 958   2                      pcaCexVal[i] = 0;
 959   2              }
 960   1      }
 961          
 962          /*
 963           *--------------------------------------------------------------------------------
 964           * void PCA_ModeSetup(U8_T modeVal, U8_T ctrlVal)
 965           * Purpose : AX11000 PCA mode configuration and initial global values.
 966           * Params  : modeVal - CMOD register for counter overflow interrupt and clock frequency.
 967           *           ctrlVal - control register to start counter and clear interrupt flag.
 968           * Returns : none.
 969           * Note    :
 970           *--------------------------------------------------------------------------------
 971           */
 972          void PCA_ModeSetup(U8_T modeVal, U8_T ctrlVal)
 973          {
 974   1              CMOD = modeVal;
 975   1              CL = 0;
 976   1              CH = 0;
 977   1              CCON = ctrlVal;
 978   1              PCA_ValueInit();
 979   1      }
 980          
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 17  

 981          /*
 982           *--------------------------------------------------------------------------------
 983           * void PCA_ModuleSetup(U8_T moduleNum, U8_T modeType,
 984           *      U8_T intrEnb, U16_T timerVal)
 985           * Purpose : Configure one module type, interrupt and compare/capture registers.
 986           * Params  : moduleNum - a module number (0 ~ 4)
 987           *           modeType - the type in the module
 988           *           intrEnb - interrupt enable if need
 989           *           timerVal - compare/capture register value if need
 990           * Returns :
 991           * Note    :
 992           *--------------------------------------------------------------------------------
 993           */
 994          void PCA_ModuleSetup(U8_T moduleNum, U8_T modeType, U8_T intrEnb, U16_T timerVal)
 995          {
 996   1              switch (moduleNum)
 997   1              {
 998   2                      case PCA_MODULE0 :
 999   2                              CCAPL0 = (U8_T)(timerVal & 0x00FF);
1000   2                              CCAPH0 = (U8_T)((timerVal & 0xFF00) >> 8);
1001   2                              CCAPM0 = modeType | intrEnb;
1002   2                              break;
1003   2                      case PCA_MODULE1 :
1004   2                              CCAPL1 = (U8_T)(timerVal & 0x00FF);
1005   2                              CCAPH1 = (U8_T)((timerVal & 0xFF00) >> 8);
1006   2                              CCAPM1 = modeType | intrEnb;
1007   2                              break;
1008   2                      case PCA_MODULE2 :
1009   2                              CCAPL2 = (U8_T)(timerVal & 0x00FF);
1010   2                              CCAPH2 = (U8_T)((timerVal & 0xFF00) >> 8);
1011   2                              CCAPM2 = modeType | intrEnb;
1012   2                              break;
1013   2                      case PCA_MODULE3 :
1014   2                              CCAPL3 = (U8_T)(timerVal & 0x00FF);
1015   2                              CCAPH3 = (U8_T)((timerVal & 0xFF00) >> 8);
1016   2                              CCAPM3 = modeType | intrEnb;
1017   2                              break;
1018   2                      case PCA_MODULE4 :
1019   2                              CCAPL4 = (U8_T)(timerVal & 0x00FF);
1020   2                              CCAPH4 = (U8_T)((timerVal & 0xFF00) >> 8);
1021   2                              CCAPM4 = modeType | intrEnb;
1022   2                              break;
1023   2              }
1024   1      }
1025          
1026          /*
1027           *--------------------------------------------------------------------------------
1028           * void PCA_ModuleTimer(U8_T moduleNum, U16_T newTimerVal)
1029           * Purpose : Set the timeout value into a module which is configured in compare mode
1030           * Params  : moduleNum - module number (0 ~ 4)
1031           *           newTimerVal - the new value in the compare register.
1032           * Returns : none
1033           * Note    :
1034           *--------------------------------------------------------------------------------
1035           */
1036          void PCA_ModuleTimer(U8_T moduleNum, U16_T newTimerVal)
1037          {
1038   1              switch (moduleNum)
1039   1              {
1040   2                      case PCA_MODULE0 :
1041   2                              CCAPL0 = (U8_T)(newTimerVal & 0x00FF);
1042   2                              CCAPH0 = (U8_T)((newTimerVal & 0xFF00) >> 8);
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 18  

1043   2                              break;
1044   2                      case PCA_MODULE1 :
1045   2                              CCAPL1 = (U8_T)(newTimerVal & 0x00FF);
1046   2                              CCAPH1 = (U8_T)((newTimerVal & 0xFF00) >> 8);
1047   2                              break;
1048   2                      case PCA_MODULE2 :
1049   2                              CCAPL2 = (U8_T)(newTimerVal & 0x00FF);
1050   2                              CCAPH2 = (U8_T)((newTimerVal & 0xFF00) >> 8);
1051   2                              break;
1052   2                      case PCA_MODULE3 :
1053   2                              CCAPL3 = (U8_T)(newTimerVal & 0x00FF);
1054   2                              CCAPH3 = (U8_T)((newTimerVal & 0xFF00) >> 8);
1055   2                              break;
1056   2                      case PCA_MODULE4 :
1057   2                              CCAPL4 = (U8_T)(newTimerVal & 0x00FF);
1058   2                              CCAPH4 = (U8_T)((newTimerVal & 0xFF00) >> 8);
1059   2                              break;
1060   2              }
1061   1      }
1062          
1063          /*
1064           *--------------------------------------------------------------------------------
1065           * U16_T PCA_GetModuleCaptureValue(U8_T moduleNum)
1066           * Purpose : get the captured values of the specified PCA module in the capture mode.
1067           * Params  : moduleNum - module number (0 ~ 4)
1068           * Returns : valCapture - the captured value of the specified PCA module.
1069           * Note    :
1070           *--------------------------------------------------------------------------------
1071           */
1072          U16_T PCA_GetModuleCaptureValue(U8_T moduleNum)
1073          {
1074   1              U16_T   valCapture = 0;
1075   1      
1076   1              switch (moduleNum)
1077   1              {
1078   2                      case PCA_MODULE0 :
1079   2                              valCapture = pcaCapVal[PCA_MODULE0];
1080   2                              break;
1081   2                      case PCA_MODULE1 :
1082   2                              valCapture = pcaCapVal[PCA_MODULE1];
1083   2                              break;
1084   2                      case PCA_MODULE2 :
1085   2                              valCapture = pcaCapVal[PCA_MODULE2];
1086   2                              break;
1087   2                      case PCA_MODULE3 :
1088   2                              valCapture = pcaCapVal[PCA_MODULE3];
1089   2                              break;
1090   2                      case PCA_MODULE4 :
1091   2                              valCapture = pcaCapVal[PCA_MODULE4];
1092   2                              break;
1093   2              }
1094   1              return valCapture;
1095   1      }
1096          
1097          
1098          /* End of pca.c */
1099          
1100          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    489    ----
C51 COMPILER V9.00   PCA                                                                   05/08/2013 16:47:35 PAGE 19  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     21       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
