; .\Build\interrupt.SRC generated from: ..\SRC\CPU\interrupt.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE ..\SRC\CPU\interrupt.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\FreeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UART\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\SRC\dhcp\;..\SRC\pppoe\;..\SRC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\SRC\Scan) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\interrupt.lst) SRC(.\Build\interrupt.SRC)

$MOD_CONT
$NOMOD51

NAME	INTERRUPT

TB08	BIT	098H.3
TB18	BIT	0C0H.3
P0	DATA	080H
SM00	BIT	098H.7
P1	DATA	090H
SM10	BIT	0C0H.7
SM01	BIT	098H.6
P2	DATA	0A0H
SM11	BIT	0C0H.6
SM02	BIT	098H.5
P3	DATA	0B0H
AC	BIT	0D0H.6
SM12	BIT	0C0H.5
T0	BIT	0B0H.4
SPIDR	DATA	0CFH
T1	BIT	0B0H.5
EA	BIT	0A8H.7
OWCIR	DATA	0D6H
CH	DATA	0C5H
DPH0	DATA	083H
IE	DATA	0A8H
DPH1	DATA	085H
CL	DATA	0C4H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
CCAPH0	DATA	0B9H
DPL0	DATA	082H
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
CCAPH1	DATA	0BAH
DPL1	DATA	084H
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
UR2_DLH	DATA	0E2H
CCAPH2	DATA	0BBH
XMRHR	DATA	0A7H
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
CCAPH3	DATA	0BCH
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
TA	DATA	0EBH
CCAPH4	DATA	0BDH
CCAPL0	DATA	0B1H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
REN0	BIT	098H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
UR2_FCR	DATA	0E3H
CCAPM0	DATA	0D1H
T2IF	DATA	0C9H
CCAPL1	DATA	0B2H
REN1	BIT	0C0H.4
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
UR2_DLL	DATA	0E1H
CCAPM1	DATA	0D2H
CCAPL2	DATA	0B3H
XMRLR	DATA	0A6H
P3_5	BIT	0B0H.5
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
CCAPM2	DATA	0D3H
CCAPL3	DATA	0B4H
XMWHR	DATA	0A5H
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
CCAPM3	DATA	0D4H
IP	DATA	0B8H
CCAPL4	DATA	0B5H
P3_7	BIT	0B0H.7
CCAPM4	DATA	0D5H
DBAR	DATA	09AH
UR2_IER	DATA	0E2H
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
UR2_LCR	DATA	0E4H
XMWLR	DATA	0A4H
INT1	BIT	0B0H.3
UR2_MCR	DATA	0E5H
DPX0	DATA	093H
I2CCIR	DATA	096H
DPX1	DATA	095H
UR2_IIR	DATA	0E3H
UR2_RBR	DATA	0E1H
ACON	DATA	09DH
DCIR	DATA	09BH
SP	DATA	081H
CCON	DATA	0C3H
CMOD	DATA	0C2H
OV	BIT	0D0H.2
WR	BIT	0B0H.6
UR2_THR	DATA	0E1H
EWDI	BIT	0E8H.5
WDIF	BIT	0D8H.3
RLDH	DATA	0CBH
EPCR	DATA	0BEH
LDHR	DATA	0AAH
UR2_LSR	DATA	0E6H
EPDR	DATA	0BFH
MCIR	DATA	0B6H
RCLK	BIT	0C8H.5
UR2_MSR	DATA	0E7H
TCLK	BIT	0C8H.4
RLDL	DATA	0CAH
LDLR	DATA	0A9H
PCON	DATA	087H
CANCIR	DATA	0DEH
TCIR	DATA	0AEH
PWDI	BIT	0F8H.5
LSCR	DATA	0A2H
TMOD	DATA	089H
TCON	DATA	088H
OWDR	DATA	0D7H
IE0	BIT	088H.1
IE1	BIT	088H.3
MXAX	DATA	0EAH
LMSR	DATA	0A1H
MD0	DATA	0F9H
B	DATA	0F0H
MD1	DATA	0FAH
LSAIER	DATA	0A1H
MD2	DATA	0FBH
WTRF	BIT	0D8H.2
MD3	DATA	0FCH
PISSR1	DATA	09EH
MD4	DATA	0FDH
LSSR	DATA	0A3H
PISSR2	DATA	09FH
MD5	DATA	0FEH
ACC	DATA	0E0H
ES0	BIT	0A8H.4
CT2	BIT	0C8H.1
ES1	BIT	0A8H.6
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RI1	BIT	0C0H.0
SPICIR	DATA	0CEH
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
TH1	DATA	08DH
TI1	BIT	0C0H.1
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
TL0	DATA	08AH
CSREPR	DATA	08FH
TL1	DATA	08BH
TL2	DATA	0CCH
PS0	BIT	0B8H.4
EIE	DATA	0E8H
WTST	DATA	092H
PS1	BIT	0B8H.6
PT0	BIT	0B8H.1
EIF	DATA	091H
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
I2CDR	DATA	097H
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DDR	DATA	09CH
DPH	DATA	083H
EIP	DATA	0F8H
DPL	DATA	082H
LCR	DATA	0A2H
SBUF0	DATA	099H
SBUF1	DATA	0C1H
EINT2	BIT	0E8H.0
EXEN2	BIT	0C8H.3
MDR	DATA	0B7H
EINT3	BIT	0E8H.1
CPRL2	BIT	0C8H.0
SCON0	DATA	098H
EINT4	BIT	0E8H.2
SCON1	DATA	0C0H
SDSTSR	DATA	094H
EINT5	BIT	0E8H.3
STATUS	DATA	0E9H
EINT6	BIT	0E8H.4
T2CON	DATA	0C8H
DPS	DATA	086H
CANDR	DATA	0DFH
TDR	DATA	0AFH
LDAHR	DATA	0A5H
DPX	DATA	093H
DMAHR	DATA	0ADH
PINT2	BIT	0F8H.0
RXD	BIT	0B0H.0
PINT3	BIT	0F8H.1
CKCON	DATA	08EH
PINT4	BIT	0F8H.2
EWT	BIT	0D8H.1
TXD	BIT	0B0H.1
LDALR	DATA	0A4H
PINT5	BIT	0F8H.3
DMALR	DATA	0ABH
LSR	DATA	0A3H
PINT6	BIT	0F8H.4
DMAMR	DATA	0ACH
ARCON	DATA	0FFH
F0	BIT	0D0H.5
F1	BIT	0D0H.1
LDCSR	DATA	0A6H
PSW	DATA	0D0H
RB08	BIT	098H.2
WDCON	DATA	0D8H
RWT	BIT	0D8H.0
RB18	BIT	0C0H.2
?PR?ax11000_PeripherialISR?INTERRUPT     SEGMENT ECODE INSEG 
?XD?ax11000_PeripherialISR?INTERRUPT     SEGMENT XDATA OVERLAYABLE
	EXTRN	CODE (I2C_Func)
	EXTRN	CODE (MAC_SetInterruptFlag)

	RSEG  ?XD?ax11000_PeripherialISR?INTERRUPT
?ax11000_PeripherialISR?BYTE:
   intrStt1?040:   DS   1
	ORG  1
   intrStt2?041:   DS   1
; /*
;  *********************************************************************************
;  *     Copyright (c) 2005	ASIX Electronic Corporation      All rights reserved.
;  *
;  *     This is unpublished proprietary source code of ASIX Electronic Corporation
;  *
;  *     The copyright notice above does not evidence any actual or intended
;  *     publication of such source code.
;  *********************************************************************************
;  */
; /*================================================================================
;  * Module Name : interrupt.c
;  * Purpose     : This file include peripheral interrupt service routine and
;  *               the wake up interrupt service routine.
;  * Author      : Robin Lee
;  * Date        : 2006-01-09
;  * Notes       :
;  * $Log: interrupt.c,v $
;  * Revision 1.2  2006/04/20 01:22:56  robin6633
;  * 1.Added watchdog timeout ISR.
;  *
;  * Revision 1.1  2006/04/07 11:36:17  robin6633
;  * no message
;  *
;  *================================================================================
;  */
; 
; /* INCLUDE FILE DECLARATIONS */
; #include	"reg80390.h"
; #include	"types.h"
; #include	"interrupt.h"
; 
; #if AX_LBI_INT_ENABLE
; #include	"lbi.h"
; #endif
; 
; #if AX_ETH_INT_ENABLE
; #include	"mac.h"
; #endif
; 
; #if AX_ETH_INT_ENABLE
; #include	"stoe.h"
; #endif
; 
; #if AX_I2C_INT_ENABLE
; #include	"i2c.h"
; #endif
; 
; #if AX_SPI_INT_ENABLE
; #include	"spi.h"
; #endif
; 
; #if AX_ONEWIRE_INT_ENABLE
; #include	"onewire.h"
; #endif
; 
; #if AX_CAN_INT_ENABLE
; #include	"can.h"
; #endif
; 
; #if AX_HSUART_INT_ENABLE
; #include	"hsuart.h"
; #endif
; 
; 
; /* NAMING CONSTANT DECLARATIONS */
; 
; 
; /* STATIC VARIABLE DECLARATIONS */
; 
; 
; /* LOCAL SUBPROGRAM DECLARATIONS */
; static void	ax11000_PeripherialISR(void);
; 
; #if AX_POWER_MANAGEMENT_INT_ENABLE
; static void	ax11000_PmmISR(void);
; #endif
; 
; #if AX_WATCHDOG_INT_ENB
; void	ax11000_WatchDogISR(void);
; #endif
; 
; 
; /* LOCAL SUBPROGRAM BODIES */
; 
; /*
;  *--------------------------------------------------------------------------------
;  * static void ax11000_PeripherialISR(void)
;  * Purpose : The interrupt service routine of Flipper peripheral devices.
;  * Params  : None.
;  * Returns : None.
;  * Note    : None.
;  *--------------------------------------------------------------------------------
;  */
CSEG	AT	0606BH
	LJMP	ax11000_PeripherialISR

; static void ax11000_PeripherialISR(void) interrupt 9 //use external interrupt 4 (0x4B)

	RSEG  ?PR?ax11000_PeripherialISR?INTERRUPT
	USING	0
ax11000_PeripherialISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPX
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 95
; {
; 	U8_T	intrStt1 = 0;
			; SOURCE LINE # 97
	MOV  	DPTR,#intrStt1?040
	CLR  	A
	MOVX 	@DPTR,A
; 	U8_T	intrStt2 = 0;
			; SOURCE LINE # 98
	INC  	DPTR
	MOVX 	@DPTR,A
?C0001:
; 
; 	/* Interrupt type check */
; 	while (1)
			; SOURCE LINE # 101
; 	{
			; SOURCE LINE # 102
; 		EA = 0;
			; SOURCE LINE # 103
	CLR  	EA
; 		intrStt1 = PISSR1;
			; SOURCE LINE # 104
	MOV  	DPTR,#intrStt1?040
	MOV  	A,PISSR1
	MOVX 	@DPTR,A
; 		intrStt2 = PISSR2;
			; SOURCE LINE # 105
	INC  	DPTR
	MOV  	A,PISSR2
	MOVX 	@DPTR,A
; 		EA = 1;
			; SOURCE LINE # 106
	SETB 	EA
; 
; 		if ((intrStt1 == 0) && (intrStt2 == 0))
			; SOURCE LINE # 108
	MOV  	DPTR,#intrStt1?040
	MOVX 	A,@DPTR
	MOV  	R7,A
	JNZ  	?C0003
	INC  	DPTR
	MOVX 	A,@DPTR
	JZ   	?C0006
; 			break;
			; SOURCE LINE # 109
?C0003:
; 
; #if AX_LBI_INT_ENABLE
; 		if (intrStt1 & LB_INT_STU)
; 		{
; 			LocalBusFunc();
; 		}
; #endif
; 
; #if AX_LBI_INT_ENABLE
; 		if (intrStt1 & LB_EXT_INT_STU)
; 		{
; 			LocalBusAccessCompleteFunc();
; 		}
; #endif
; 
; #if AX_ETH_INT_ENABLE
; #if (MAC_GET_INTSTATUS_MODE == MAC_INTERRUPT_MODE)
; 		if (intrStt1 & ETH_INT_STU)
			; SOURCE LINE # 127
	MOV  	A,R7
	JNB  	ACC.2,?C0004
; 		{
			; SOURCE LINE # 128
; 			MAC_SetInterruptFlag();
			; SOURCE LINE # 129
	LCALL	MAC_SetInterruptFlag
; 		}
			; SOURCE LINE # 130
?C0004:
; #endif
; #endif
; 
; #if AX_ETH_INT_ENABLE
; #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
; 		if (intrStt1 & TOE_INT_STU)
; 		{
; 			STOE_SetInterruptFlag();
; 		}
; #endif
; #endif
; 
; #if AX_CAN_INT_ENABLE
; 		if (intrStt1 & CAN_INT_STU)
; 		{
; 			CAN_Func();
; 		}
; #endif
; 
; #if AX_I2C_INT_ENABLE
; 		if (intrStt1 & I2C_INT_STU)
			; SOURCE LINE # 151
	MOV  	DPTR,#intrStt1?040
	MOVX 	A,@DPTR
	JNB  	ACC.6,?C0001
; 		{
			; SOURCE LINE # 152
; 			I2C_Func();
			; SOURCE LINE # 153
	LCALL	I2C_Func
; 		}
			; SOURCE LINE # 154
; #endif
; 
; #if AX_SPI_INT_ENABLE
; 		if (intrStt1 & SPI_INT_STU)
; 		{
; 			SPI_Func();
; 		}
; #endif
; 
; #if AX_ONEWIRE_INT_ENABLE
; 		if (intrStt1 & OW_INT_STU)
; 		{
; 			ONEWIRE_Func();
; 		}
; #endif
; 
; #if AX_HSUART_INT_ENABLE
; 		if (intrStt2 & UART2_INT_STU)
; 		{
; 			HSUR_Func();
; 		}
; #endif
; 	}
			; SOURCE LINE # 177
	SJMP 	?C0001
; }
			; SOURCE LINE # 178
?C0006:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	DPX
	POP  	B
	POP  	ACC
	RETI 	
; END OF ax11000_PeripherialISR

	END
