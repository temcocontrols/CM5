C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE SDCARD_SPI
OBJECT MODULE PLACED IN .\Build\sdcard_spi.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SD_Card\sdcard_spi.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(.
                    -.\SRC\FreeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..
                    -\SRC\UART\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card
                    -\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\manageme
                    -nt\;..\SRC\dhcp\;..\SRC\pppoe\;..\SRC\MINI_262\;..\SRC\flash;..\SRC\SNTP) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\
                    -Build\sdcard_spi.lst) OBJECT(.\Build\sdcard_spi.obj)

line level    source

   1          /*
   2          note:   this file for testing SD card using hardware SPI, we use software SPI before.
   3          author: chelsea
   4          date:   Aug 23th, 2011 
   5          
   6          */
   7          
   8          #include <intrins.h>
   9          #include "mmc.h"
  10          #include "fat.h"
  11          #include "stdio.h"
  12          
  13          
  14          #include "spi.h"
  15          #include "spiapi.h"
  16          
  17          
  18          extern void DELAY_Us(U16_T loop);
  19          S8_T uart0_PutChar (S8_T c);
  20          S8_T uart0_GetKey (void);
  21          
  22          U8_T mmc_init ()
  23          {
  24   1              U8_T data Timeout = 0;
  25   1              U8_T data a,b;
  26   1              U8_T CMD[] = {0x40,0x00,0x00,0x00,0x00,0x95};   
  27   1      
  28   1              for ( b = 0;b < 0x0f;b++) /* send 16 bytes 0xff */
  29   1              {
  30   2                      SPI_ByteWrite(0xff);
  31   2              }
  32   1              //mmc_write_command (CMD);
  33   1              while(mmc_write_command (CMD) !=1)
  34   1              {
  35   2                      if (Timeout++ > 5)
  36   2                      {       
  37   3                              uart0_PutChar('1');             
  38   3                              return(1);                      
  39   3                      }
  40   2                      
  41   2              }
  42   1              
  43   1      //      uart0_PutChar('2');
  44   1              Timeout = 0;
  45   1              CMD[0] = 0x41; // Commando 1
  46   1              CMD[5] = 0xFF;
  47   1              while( mmc_write_command (CMD) !=0)
  48   1              {
  49   2                      if (Timeout++ > 100)
  50   2                      {                       
C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 2   

  51   3                              return(2); 
  52   3                      }
  53   2                      uart0_PutChar('2');
  54   2              }
  55   1      //      mmc_write_command (CMD);
  56   1              uart0_PutChar('0');
  57   1              return(0);  
  58   1      //      printf("success\r\n");  
  59   1              while(1){};//  ³É¹¦
  60   1      }
*** WARNING C280 IN LINE 25 OF SD_CARD\SDCARD_SPI.C: 'a': unreferenced local variable
  61          
  62          
  63          
  64          U8_T mmc_write_command (U8_T  *cmd)
  65          {
  66   1              U8_T data tmp = 0xff;
  67   1              U8_T data retry = 0;
  68   1              U16_T data Timeout = 0;
  69   1              U8_T a;
  70   1      
  71   1              SPI_ByteWrite(0xFF);  // send 8 clock signal
  72   1              
  73   1              for ( a = 0;a < 0x06;a++) //send 6 Byte Command 
  74   1              {
  75   2                      SPI_ByteWrite(cmd[a]);
  76   2              }
  77   1      
  78   1              SPI_ByteWrite(0xff);
  79   1              while (tmp == 0xff)     
  80   1              {
  81   2                      SPI_GetData(&tmp);
  82   2                      Timeout++;
  83   2                      if(Timeout > 500)
  84   2                      {                       
  85   3                              break;
  86   3                      }               
  87   2              }
  88   1              uart0_PutChar('a');
  89   1              return(tmp);
  90   1              // get 16 bits reponse 
  91   1      /*      SPI_GetData(&tmp); //read the first byte,ignore it. 
  92   1              do 
  93   1              {  
  94   1                      SPI_GetData(&tmp);  // get the last 8 bits
  95   1                      retry++;
  96   1                      uart0_PutChar('a');
  97   1              }
  98   1              while((tmp == 0xff) && (retry < 100)); 
  99   1      
 100   1              return(tmp);
 101   1      
 102   1      
 103   1              while(tmp == 0xff)      
 104   1              {
 105   1                      SPI_GetData(&tmp);
 106   1                      if (Timeout++ > 500)
 107   1                      {
 108   1                              break;
 109   1                      }
 110   1      //              ComSendByte( tmp);
 111   1      //              ComSendByte('b');
C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 3   

 112   1              }
 113   1              */
 114   1      
 115   1      }
 116          
 117          
 118          
 119          
 120          U8_T mmc_write_sector (U32_T addr,U8_T *Buffer)
 121          {
 122   1              U8_T data tmp;
 123   1              U16_T data a ;
 124   1              U8_T cmd[] = {0x58,0x00,0x00,0x00,0x00,0xFF}; 
 125   1              U8_T retry = 0;
 126   1      
 127   1      //      LED_MMC_WR=0;     
 128   1                
 129   1              addr = addr << 9; //addr = addr * 512
 130   1              
 131   1              cmd[1] = ((addr & 0xFF000000) >>24 );
 132   1              cmd[2] = ((addr & 0x00FF0000) >>16 );
 133   1              cmd[3] = ((addr & 0x0000FF00) >>8 );
 134   1      
 135   1              tmp = mmc_write_command (cmd);
 136   1              if (tmp != 0)
 137   1              {
 138   2      //              LED_MMC_WR=1;     
 139   2                      return(tmp);
 140   2              }
 141   1                              
 142   1              for (a = 0;a < 100;a++)
 143   1              {
 144   2                      SPI_GetData(&tmp); //  tbd:
 145   2              }
 146   1              
 147   1              SPI_ByteWrite(0xFE);    
 148   1              
 149   1              for ( a = 0;a < 512;a++)
 150   1              {
 151   2                      SPI_ByteWrite(*Buffer++);
 152   2              }
 153   1              
 154   1              SPI_ByteWrite(0xFF); //Schreibt Dummy CRC
 155   1              SPI_ByteWrite(0xFF); //CRC Code wird nicht benutzt
 156   1      
 157   1      //      while (SPI_GetData() != 0xff){};
 158   1              // tbd:-----
 159   1              // get 16 bits reponse 
 160   1              SPI_GetData(&tmp); //read the first byte,ignore it. 
 161   1              do 
 162   1              {  
 163   2                      SPI_GetData(&tmp);  // get the last 8 bits
 164   2                      retry++;
 165   2              }
 166   1              while((tmp == 0xff) && (retry < 100)); 
 167   1      
 168   1      /*      SPI_GetData(&tmp);
 169   1              while ( tmp != 0xff)
 170   1              {
 171   1                      SPI_GetData(&tmp);
 172   1              };
 173   1      */      
C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 4   

 174   1      //      MMC_Disable();
 175   1              
 176   1      //      LED_MMC_WR=1;     
 177   1              return(0);
 178   1      }
 179          
 180          
 181          void mmc_read_block(U8_T *cmd,U8_T *Buffer,U16_T Bytes)
 182          {       
 183   1              U16_T  a;
 184   1              U8_T tmp;
 185   1              U8_T retry = 0;
 186   1      
 187   1              if (mmc_write_command (cmd) != 0)
 188   1              {
 189   2                       return;
 190   2              }
 191   1              
 192   1      // tbd:-----
 193   1      // get 16 bits reponse 
 194   1              SPI_GetData(&tmp); //read the first byte,ignore it. 
 195   1              do 
 196   1              {  
 197   2                      SPI_GetData(&tmp);  // get the last 8 bits
 198   2                      retry++;
 199   2              }
 200   1              while((tmp == 0xff) && (retry < 100)); 
 201   1      
 202   1      /*      SPI_GetData(&tmp);
 203   1              while ( tmp != 0xfe)
 204   1              {
 205   1                      SPI_GetData(&tmp);
 206   1              };*/
 207   1      //      while (SPI_GetData() != 0xfe){};
 208   1      
 209   1              for ( a = 0;a < Bytes;a++)
 210   1              {
 211   2                      SPI_GetData(&tmp);
 212   2                      *Buffer++ = tmp;
 213   2              }
 214   1              SPI_GetData(&tmp);//CRC - Byte wird nicht ausgewertet
 215   1              SPI_GetData(&tmp);//CRC - Byte wird nicht ausgewertet
 216   1              
 217   1      //      MMC_Disable();
 218   1              
 219   1              return;
 220   1      }
 221          
 222          
 223          U8_T mmc_read_sector (U32_T addr,U8_T *Buffer)
 224          {       
 225   1              U8_T cmd[] = {0x51,0x00,0x00,0x00,0x00,0xFF}; 
 226   1              
 227   1      //      LED_MMC_WR=0;     
 228   1              addr = addr << 9; //addr = addr * 512
 229   1      
 230   1              cmd[1] = ((addr & 0xFF000000) >>24 );
 231   1              cmd[2] = ((addr & 0x00FF0000) >>16 );
 232   1              cmd[3] = ((addr & 0x0000FF00) >>8 );
 233   1      
 234   1          mmc_read_block(cmd,Buffer,512);
 235   1      
C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 5   

 236   1      //      LED_MMC_WR=1;     
 237   1              return(0);
 238   1      }
 239          
 240          /* test code */
 241          
 242          U16_T   xdata   datatemp=0;
 243          
 244          
 245          void SD_test(void)
 246          {
 247   1              S8_T input;
 248   1              U8_T temp = 0;
 249   1              U16_T i;
 250   1              U16_T xdata Clustervar=0;
 251   1              U32_T xdata Size = 0;
 252   1              U8_T xdata Dir_Attrib = 0;
 253   1      
 254   1      // select SS0
 255   1              uart0_PutChar('1');
 256   1      //      printf("test sd\r\n");
 257   1              DELAY_Us(1000);
 258   1              SPI_Setup(SPI_SSO_ENB|SPI_MST_SEL|SPI_SS_AUTO|SPI_ENB, SPI_STCFIE, 0x80, SLAVE_SEL_0); // 25M
 259   1      
 260   1              
 261   1              //while(1)
 262   1              {
 263   2              //      scanf("input = %c\r\n",&input);
 264   2              //      if(input == '1') // write
 265   2                      {
 266   3                      //      printf("write\r\n");
 267   3                      //      uart0_PutChar('1');
 268   3                              temp = mmc_init ();//³õÊ¼»¯SD¿¨         
 269   3                              fat_cluster_data_store();    
 270   3                              datatemp=0;
 271   3                              if(fat_write_file_lock ("TEST    TXT"))//ÎÄ¼þÃû8¸ö×Ö½Ú  
 272   3                              {                                                
 273   4                                      //printf("test.txt\r\n");
 274   4                                      for(i=0;i<512;i++)//Ò»´ÎÐ´Ò»¸öÉÈÇø£¬512¸ö×Ö½Ú
 275   4                                      {
 276   5                                              SectorBuffer[i] = datatemp+0x30;//Ð´Èë»º³å£¬ASCIIÂë
 277   5                                              datatemp++;
 278   5                                              if(datatemp == 5)//´æ´¢Êý¾Ý0-9Ñ­»·
 279   5                                                      datatemp = 0;
 280   5                                      }
 281   4                                      fat_write_file();  //Ð´ÈëÊý¾Ý 
 282   4                              }
 283   3                      }
 284   2              //      if(input == '2') // read
 285   2                      {
 286   3                      //      printf("read\r\n");
 287   3                      //      uart0_PutChar('2');
 288   3                              temp = mmc_init ();     
 289   3                              fat_cluster_data_store();                       
 290   3                              if (fat_search_file("TEST    TXT",&Clustervar,&Size,&Dir_Attrib) == 1)//´´½¨ÎÄ¼þÃû
 291   3                              {
 292   4                                      uart0_PutChar('t');
 293   4                                      if(fat_read_file ( Clustervar,0,512))//512¸ö×Ö½Ú
 294   4                                      {       
 295   5                                              uart0_PutChar('4');                             
 296   5                                              for(Clustervar=0;Clustervar<512;Clustervar++)
 297   5                                              {
C51 COMPILER V7.50   SDCARD_SPI                                                            08/25/2011 10:58:15 PAGE 6   

 298   6                                              
 299   6                                              //      printf("%c",SectorBuffer[Clustervar]);
 300   6                                                      uart0_PutChar(SectorBuffer[Clustervar]);
 301   6                                                      //ComSendByte( SectorBuffer[Clustervar]);//¶Á³öµÄÊý¾Ý´Ó´®¿Ú·¢ËÍ³ö
 302   6                                                      //ComSendByte( 'a');//¶Á³öµÄÊý¾Ý´Ó´®¿Ú·¢ËÍ³ö
 303   6                                                      
 304   6                                              }       
 305   5                                      }
 306   4                              }
 307   3                      }
 308   2              }
 309   1      }
*** WARNING C280 IN LINE 247 OF SD_CARD\SDCARD_SPI.C: 'input': unreferenced local variable
 310          
 311          
 312          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1271    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =      2      58
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
