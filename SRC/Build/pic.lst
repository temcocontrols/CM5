C51 COMPILER V9.00   PIC                                                                   05/08/2013 16:47:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PIC
OBJECT MODULE PLACED IN .\Build\pic.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Modbus\pic.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\Fr
                    -eeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UAR
                    -T\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card\;..\SRC
                    -\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\S
                    -RC\dhcp\;..\SRC\pppoe\;..\SRC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\SRC\Scan) DE
                    -FINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\pic.lst) OBJECT(.\Build\pic.obj)

line level    source

   1          #include "main.h"
   2          #include "pic.h"
   3          #include "sI2C.h"
   4          
   5          
   6          #if 1
   7          unsigned char pic_type=0;       // 0 - no PIC
   8                                                          // 1 - original PIC
   9                                                          // 2 - PIC with interrupt, and new start condition
  10                                                          // 3 - PIC with 8 AD
  11          unsigned char pic_version;
  12          
  13          //extern bit pic_exists;
  14          
  15          
  16          //signed int Filter(unsigned char channel,signed input);
  17          unsigned int Filter(unsigned char channel,signed int input);
  18          
  19          
  20          unsigned int data_buf[2]=0;
  21          //unsigned int checksum;
  22          
  23          extern U8_T flag_protect_lcd; 
  24          
  25          
  26          bit read_pic( char channel)
  27          {
  28   1      //      Test[40]++;
  29   1      //      flag_protect_lcd = 1;
  30   1              i2c_pic_start();
  31   1              i2c_pic_write(READ_CHAN0 + channel);
  32   1              
  33   1      
  34   1              DELAY_Us(10);
  35   1              if (GET_ACK())
  36   1              {       
  37   2      //              Test[42]++;
  38   2                      sI2C_stop();
  39   2                      return 0;
  40   2              }
  41   1              DELAY_Us(10); 
  42   1              data_buf[0] = i2c_pic_read();
  43   1              GIVE_PIC_ACK();
  44   1              DELAY_Us(10);
  45   1              data_buf[1] = i2c_pic_read();
  46   1      //      GIVE_PIC_ACK();
  47   1              DELAY_Us(10);
  48   1              sI2C_stop();    
  49   1      //      flag_protect_lcd = 0;
  50   1      //      LCD_CS = 0;
C51 COMPILER V9.00   PIC                                                                   05/08/2013 16:47:37 PAGE 2   

  51   1              //checksum = (data_buf[0] + data_buf[1] + data_buf[2] + data_buf[3])& 0xFFFF;
  52   1              if (data_buf[1] == /*checksum*/250)
  53   1              {
  54   2      //              Test[41]++;
  55   2              //      if( AInputAM & (0x01 << channel) == 0)
  56   2                              AI_Value[channel] = Filter(channel,data_buf[0]);//Filter(channel,data_buf[0] / 3);
  57   2                      
  58   2                      return 1;
  59   2              }
  60   1              else
  61   1              {
  62   2                      return 0;
  63   2              }
  64   1      
  65   1      
  66   1      }
  67          
  68          #if 0
              // MDF 12/01/04
              // Reads version from the PIC chip.  
              bit read_pic_version( void)
              {
              
                      unsigned int temp_version, temp_check;
              
                      pic_version = 2;
              
              //      EA = 0;
                      ET2=0;
                      i2c_pic_start();
                      
                      i2c_pic_write( READ_VERSION );
              
              
                      if (GET_ACK())
                      {
                              sI2C_stop();
              //              EA = 1;
              //              ET2=1;
                              pic_version = 0;
               
                              return 0;
                      }
                      DELAY_Us(10);
              
              
                      temp_version = i2c_pic_read();
              
                      GIVE_PIC_ACK();
                      DELAY_Us(10);
                      temp_check = i2c_pic_read();
              
                      sI2C_stop();
              
              //      EA = 1;
              //      ET2=1;
                      
                      if (temp_check == C_VER_CHECKSUM)
                      {
                              pic_version = temp_version & 0x0ff;
                              //E2prom_Write_Byte( EEP_PIC_VERSION,pic_version);
                              //printf("version = %d\r\n",(int)pic_version);
C51 COMPILER V9.00   PIC                                                                   05/08/2013 16:47:37 PAGE 3   

                              return 1;
                      }
                      else
                      {
                              pic_version = 0;
                              //E2prom_Write_Byte( EEP_PIC_VERSION,pic_version);
                              //printf("version = %d\r\n",(int)pic_version);
                              return 0;
                      }
              
              }
              
              #endif
 126          /*;***********************************/
 127          /*;i2c_startup sequence of 24Cxx*/
 128          void i2c_pic_start()
 129          {
 130   1              // PIC chip requires a special double start condition in order
 131   1              // to initiate communication.  This is to insure the PIC does not 
 132   1              // read any false starts.
 133   1              // MDF 12/01/04
 134   1              
 135   1              // 1st start condition
 136   1              I2C_SDA = 0;
 137   1              DELAY_Us(30);
 138   1              I2C_SCL = 0;
 139   1              DELAY_Us(15);
 140   1              // reset bus
 141   1              I2C_SDA = 1;
 142   1              I2C_SCL = 1;
 143   1              DELAY_Us(15);
 144   1      
 145   1              // 2nd start condition
 146   1              I2C_SDA = 0;
 147   1              DELAY_Us(30);
 148   1              I2C_SCL = 0;
 149   1      //      DELAY_Us(20);
 150   1      }
 151          
 152          
 153          
 154          
 155          void GIVE_PIC_ACK( void )
 156          {
 157   1              int j=0;
 158   1              // Wait until the data signal goes high
 159   1              while (!I2C_SDA){
 160   2                      j++;
 161   2                      // If no clock, exit i2c_read routine
 162   2                      if (j == 500)
 163   2                              return;
 164   2              }
 165   1              // Bring the data line low
 166   1          I2C_SDA=0;
 167   1              // Pulse the clock
 168   1          I2C_SCL=1;
 169   1          DELAY_Us (1);
 170   1          I2C_SCL=0;
 171   1              // Bring the data line back high
 172   1          I2C_SDA=1;
 173   1              DELAY_Us (1);
 174   1      }
C51 COMPILER V9.00   PIC                                                                   05/08/2013 16:47:37 PAGE 4   

 175          
 176          /*;************************************/
 177          /*;send a 8-bit data to 12F675 */
 178          void i2c_pic_write( unsigned char ch )
 179          {
 180   1              unsigned char i = 8;
 181   1              do
 182   1              {    
 183   2                      DELAY_Us(50);
 184   2                      I2C_SDA = ( ch & 0x80 );
 185   2                      I2C_SCL=1;
 186   2                      DELAY_Us(50);
 187   2                      if(i > 1) I2C_SCL=0;
 188   2                      ch<<=1;
 189   2      
 190   2              } while( --i != 0 );    
 191   1              I2C_SDA=1;
 192   1              //I2C_SCL=0;
 193   1      }
 194          
 195          
 196          /*;**************************************/
 197          /*;receive a 8-bit data from 12F675 */
 198          int i2c_pic_read( void )
 199          {
 200   1              unsigned char i;
 201   1              int data1 = 0;
 202   1      
 203   1              for( i=0; i<16; i++ )
 204   1              {
 205   2                      I2C_SCL = 1;
 206   2                      DELAY_Us(1);
 207   2                      data1 = ( data1 << 1 ) | I2C_SDA;
 208   2                      I2C_SCL = 0;
 209   2                      DELAY_Us(1);
 210   2              }
 211   1      
 212   1              return data1;
 213   1      }
 214          
 215          
 216          /*;**************************************/
 217          /*;detect the ACK signal to 24Cxx*/     
 218          // returns a 1 for no ACK.  returns a 0 for successful ACK              
 219          unsigned int GET_ACK( void )
 220          {
 221   1          //unsigned char c=0;
 222   1          unsigned char i;
 223   1       
 224   1      
 225   1              //if (pic_version) // only newer versions of the pic have the 2nd start condition.
 226   1              {
 227   2                  // MDF 12/01/04
 228   2                  // Wait for data line to be pulled low.
 229   2                  for (i=0; i<100; i++)
 230   2                  {
 231   3                              I2C_SDA = 1;
 232   3                              //c=I2C_SDA;
 233   3                              if (I2C_SDA == 0){
 234   4                              // if data line is low, pulse the clock.
 235   4                                  I2C_SCL=1;
 236   4                                      DELAY_Us(10);
C51 COMPILER V9.00   PIC                                                                   05/08/2013 16:47:37 PAGE 5   

 237   4                                  I2C_SCL=0;
 238   4                                      return 0;
 239   4                              }               
 240   3                  }
 241   2                  I2C_SCL=0;
 242   2                  return 1;
 243   2              }
 244   1      
 245   1              /*else
 246   1              {
 247   1                  I2C_SDA=1;
 248   1                  I2C_SCL=1;
 249   1                  for (i=0; i<10; i++)
 250   1                  {
 251   1                              c=I2C_SDA;
 252   1                              if (c == 0){
 253   1                                  I2C_SCL=0;
 254   1                                      return 0;
 255   1                              }               
 256   1                  }
 257   1                  I2C_SCL=0;
 258   1                  return 1;
 259   1              }*/
 260   1      }
 261          
 262          
 263          #endif
 264          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    460    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
