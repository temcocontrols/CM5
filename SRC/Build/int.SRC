; .\Build\int.SRC generated from: MINI_262\int.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE MINI_262\int.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\FreeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UART\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\SRC\dhcp\;..\SRC\pppoe\;..\SRC\MINI_262\;..\SRC\flash;..\SRC\SNTP) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\int.lst) SRC(.\Build\int.SRC)

$MOD_CONT
$NOMOD51

NAME	INT

TB08	BIT	098H.3
TB18	BIT	0C0H.3
P0	DATA	080H
SM00	BIT	098H.7
P1	DATA	090H
SM10	BIT	0C0H.7
SM01	BIT	098H.6
P2	DATA	0A0H
SM11	BIT	0C0H.6
SM02	BIT	098H.5
P3	DATA	0B0H
AC	BIT	0D0H.6
SM12	BIT	0C0H.5
T0	BIT	0B0H.4
SPIDR	DATA	0CFH
T1	BIT	0B0H.5
EA	BIT	0A8H.7
OWCIR	DATA	0D6H
CH	DATA	0C5H
DPH0	DATA	083H
IE	DATA	0A8H
DPH1	DATA	085H
CL	DATA	0C4H
RELAY_1	BIT	090H.0
P0_0	BIT	080H.0
RELAY_2	BIT	090H.1
P1_0	BIT	090H.0
P0_1	BIT	080H.1
CCAPH0	DATA	0B9H
DPL0	DATA	082H
RELAY_3	BIT	090H.2
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
CCAPH1	DATA	0BAH
DPL1	DATA	084H
RELAY_4	BIT	090H.3
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
UR2_DLH	DATA	0E2H
CCAPH2	DATA	0BBH
XMRHR	DATA	0A7H
RELAY_5	BIT	090H.4
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
CCAPH3	DATA	0BCH
RELAY_6	BIT	090H.5
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
TA	DATA	0EBH
CCAPH4	DATA	0BDH
CCAPL0	DATA	0B1H
RELAY_7	BIT	090H.6
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
REN0	BIT	098H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
UR2_FCR	DATA	0E3H
CCAPM0	DATA	0D1H
T2IF	DATA	0C9H
CCAPL1	DATA	0B2H
RELAY_8	BIT	090H.7
REN1	BIT	0C0H.4
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
UR2_DLL	DATA	0E1H
CCAPM1	DATA	0D2H
CCAPL2	DATA	0B3H
XMRLR	DATA	0A6H
RELAY_9	BIT	0B0H.4
P3_5	BIT	0B0H.5
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
CCAPM2	DATA	0D3H
CCAPL3	DATA	0B4H
XMWHR	DATA	0A5H
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
CCAPM3	DATA	0D4H
IP	DATA	0B8H
CCAPL4	DATA	0B5H
P3_7	BIT	0B0H.7
CCAPM4	DATA	0D5H
DBAR	DATA	09AH
UR2_IER	DATA	0E2H
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
UR2_LCR	DATA	0E4H
XMWLR	DATA	0A4H
INT1	BIT	0B0H.3
UR2_MCR	DATA	0E5H
DPX0	DATA	093H
I2CCIR	DATA	096H
DPX1	DATA	095H
UR2_IIR	DATA	0E3H
CHSEL0	BIT	0B0H.0
UR2_RBR	DATA	0E1H
CHSEL1	BIT	0B0H.1
ACON	DATA	09DH
CHSEL2	BIT	0B0H.2
DCIR	DATA	09BH
SP	DATA	081H
CHSEL3	BIT	0B0H.3
CCON	DATA	0C3H
CMOD	DATA	0C2H
OV	BIT	0D0H.2
WR	BIT	0B0H.6
UR2_THR	DATA	0E1H
EWDI	BIT	0E8H.5
WDIF	BIT	0D8H.3
RLDH	DATA	0CBH
EPCR	DATA	0BEH
LDHR	DATA	0AAH
UR2_LSR	DATA	0E6H
EPDR	DATA	0BFH
MCIR	DATA	0B6H
RCLK	BIT	0C8H.5
UR2_MSR	DATA	0E7H
_2003_ENALBE	BIT	0A0H.0
TCLK	BIT	0C8H.4
RLDL	DATA	0CAH
LDLR	DATA	0A9H
PCON	DATA	087H
CANCIR	DATA	0DEH
TCIR	DATA	0AEH
PWDI	BIT	0F8H.5
LSCR	DATA	0A2H
TMOD	DATA	089H
TCON	DATA	088H
OWDR	DATA	0D7H
IE0	BIT	088H.1
IE1	BIT	088H.3
MXAX	DATA	0EAH
LMSR	DATA	0A1H
RELAY_10	BIT	0B0H.5
RELAY_11	BIT	0B0H.6
MD0	DATA	0F9H
B	DATA	0F0H
RELAY_12	BIT	0B0H.7
MD1	DATA	0FAH
LSAIER	DATA	0A1H
MD2	DATA	0FBH
WTRF	BIT	0D8H.2
MD3	DATA	0FCH
PISSR1	DATA	09EH
MD4	DATA	0FDH
LSSR	DATA	0A3H
PISSR2	DATA	09FH
MD5	DATA	0FEH
ACC	DATA	0E0H
ES0	BIT	0A8H.4
CT2	BIT	0C8H.1
ES1	BIT	0A8H.6
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RI1	BIT	0C0H.0
SPICIR	DATA	0CEH
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
TH1	DATA	08DH
TI1	BIT	0C0H.1
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
TL0	DATA	08AH
CSREPR	DATA	08FH
TL1	DATA	08BH
TL2	DATA	0CCH
PS0	BIT	0B8H.4
EIE	DATA	0E8H
WTST	DATA	092H
PS1	BIT	0B8H.6
PT0	BIT	0B8H.1
EIF	DATA	091H
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
I2CDR	DATA	097H
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
SDA	BIT	0A0H.2
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DDR	DATA	09CH
DPH	DATA	083H
EIP	DATA	0F8H
DPL	DATA	082H
LCR	DATA	0A2H
SBUF0	DATA	099H
SCL	BIT	0A0H.3
SBUF1	DATA	0C1H
EINT2	BIT	0E8H.0
EXEN2	BIT	0C8H.3
MDR	DATA	0B7H
EINT3	BIT	0E8H.1
CPRL2	BIT	0C8H.0
SCON0	DATA	098H
EINT4	BIT	0E8H.2
SCON1	DATA	0C0H
SDSTSR	DATA	094H
EINT5	BIT	0E8H.3
STATUS	DATA	0E9H
EINT6	BIT	0E8H.4
T2CON	DATA	0C8H
DPS	DATA	086H
CANDR	DATA	0DFH
TDR	DATA	0AFH
LDAHR	DATA	0A5H
DPX	DATA	093H
DMAHR	DATA	0ADH
PINT2	BIT	0F8H.0
RXD	BIT	0B0H.0
PINT3	BIT	0F8H.1
CKCON	DATA	08EH
PINT4	BIT	0F8H.2
EWT	BIT	0D8H.1
TXD	BIT	0B0H.1
LDALR	DATA	0A4H
PINT5	BIT	0F8H.3
DMALR	DATA	0ABH
LSR	DATA	0A3H
PINT6	BIT	0F8H.4
DMAMR	DATA	0ACH
ARCON	DATA	0FFH
F0	BIT	0D0H.5
F1	BIT	0D0H.1
RS485_1_TXEN	BIT	090H.7
LDCSR	DATA	0A6H
PSW	DATA	0D0H
RB08	BIT	098H.2
WDCON	DATA	0D8H
RWT	BIT	0D8H.0
RB18	BIT	0C0H.2
?PR?UART0_ISR?INT    SEGMENT ECODE INSEG 
?PR?UART1_ISR?INT    SEGMENT ECODE INSEG 
?C_INITSEG           SEGMENT CODE 
?FD?INT              SEGMENT HDATA INSEG 
?XD?INT              SEGMENT XDATA 
?BI?INT              SEGMENT BIT 
	EXTRN	HDATA (CommCount)
	EXTRN	HDATA (flag_uart)
	EXTRN	BIT (flagLED_232)
	EXTRN	HDATA (Modbus)
	EXTRN	BIT (flagLED_485)
	EXTRN	CODE (handle_Modbus_RX0)
	EXTRN	CODE (handle_Modbus_RX1)
	PUBLIC	data_buffer
	PUBLIC	xReadyQueue
	PUBLIC	flag_Ready
	PUBLIC	tempSBUF
	PUBLIC	flag_int
	PUBLIC	rece_count
	PUBLIC	transmit_finished
	PUBLIC	Handle_MSTPRev
	PUBLIC	MstpDataReady
	PUBLIC	packet_size

	RSEG  ?FD?INT
    packet_size:   DS   2
 Handle_MSTPRev:   DS   3
     rece_count:   DS   2
    data_buffer:   DS   1000

	RSEG  ?XD?INT
  MstpDataReady:   DS   1
       tempSBUF:   DS   1
     flag_Ready:   DS   1
    xReadyQueue:   DS   3

	RSEG  ?BI?INT
transmit_finished:   DBIT   1
       flag_int:   DBIT   1

	RSEG  ?C_INITSEG
	DB	0C1H, transmit_finished + 080H	; bit-init

	DB	0E0H
	DB	002H
	DB	MBYTE rece_count
	DW	WORD0 rece_count
	DW	00000H

	DB	0E0H
	DB	002H
	DB	MBYTE packet_size
	DW	WORD0 packet_size
	DW	00000H

; #include "main.h"
; 
; void handle_PTP_RX( void );
; void handle_MSTP_RX( U8_T temp  );
; void handle_Modbus_RX0(void);
; void handle_Modbus_RX1(void);
; 
; bit transmit_finished = 1;
; U8_T far data_buffer[1000]; // should be 511 real data, some data is 0x90 + real data
; U16_T far rece_count = 0;
; U16_T far packet_size = 0;				 
; 
; 
; 
; void Handle_MSTP_Task(void) reentrant;
; 
; 
; bit flag_int;
; 
; U8_T MstpDataReady;
; U8_T flag_Ready;
; //extern U8_T Test[4];
; 
; #define MSTPRev_STACK_SIZE				( ( unsigned portSHORT ) 256 )
; 
; 
; xQueueHandle	xReadyQueue; /* trasmit data from comm to interupt */
; xTaskHandle far Handle_MSTPRev;
; 
; 
; extern U8_T port; // Serial port 0 / 1
; 
; 
; extern U8_T far flag_uart;
; extern bit flagLED_232;
; extern bit flagLED_485;
; extern U8_T far CommCount;
; 
; U8_T tempSBUF;
; 
; #if 1
CSEG	AT	06043H
	LJMP	UART0_ISR

; static void UART0_ISR(void) interrupt 4

	RSEG  ?PR?UART0_ISR?INT
	USING	0
UART0_ISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPX
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 42
; {
; 
; 	flag_uart = UART0;
			; SOURCE LINE # 45
	MOV  	DPTR,#flag_uart
	CLR  	A
	MOVX 	@DPTR,A
; 	if (RI0)
			; SOURCE LINE # 46
	JNB  	RI0,?C0001
; 	{
			; SOURCE LINE # 47
; 	
; 		EA = 0;
			; SOURCE LINE # 49
	CLR  	EA
; 		//flag_int = 1;
; 	 	
; 		/* refresh commnicaiton status LED */
; 		flag_uart = UART0;
			; SOURCE LINE # 53
	MOVX 	@DPTR,A
; 		flagLED_232 = 1;flagLED_485 = 0;
			; SOURCE LINE # 54
	SETB 	flagLED_232
	CLR  	flagLED_485
; 		CommCount = 0;
			; SOURCE LINE # 55
	MOV  	DPTR,#CommCount
	MOVX 	@DPTR,A
; 
; 		
; 		if(Modbus.PROTOCAL == MODBUS)	
			; SOURCE LINE # 58
	MOV  	DPTR,#Modbus+0CH
	MOVX 	A,@DPTR
	JNZ  	?C0002
; 			handle_Modbus_RX0();
			; SOURCE LINE # 59
	LCALL	handle_Modbus_RX0
?C0002:
; 		#ifdef BACNET
; 		else if(Modbus.PROTOCAL == BACNET_MSTP)
; 		{
; 			tempSBUF = SBUF0;
; 			/*xTaskWokenByPost = */
; 			cQueueSendFromISR( xReadyQueue, &tempSBUF,  0);
; 			/*if( xTaskWokenByPost == pdPASS )
; 			{				
; 				MstpDataReady = 1;				
; 				//handle_MSTP_RX(temp);
; 			}*/			
; 		}	
; 		else if(Modbus.PROTOCAL == BACNET_PTP)
; 			handle_PTP_RX();		
; 		#endif
; 
; 		//flag_int = 0;
; 		RI0 = 0;
			; SOURCE LINE # 77
	CLR  	RI0
; 		EA = 1;
			; SOURCE LINE # 78
	SETB 	EA
; 		
; 	
; 	} 
			; SOURCE LINE # 81
	SJMP 	?C0005
?C0001:
; 	else if (TI0)
			; SOURCE LINE # 82
	JNB  	TI0,?C0005
; 	{
			; SOURCE LINE # 83
; 		EA = 0;
			; SOURCE LINE # 84
	CLR  	EA
; 		TI0 = 0;
			; SOURCE LINE # 85
	CLR  	TI0
; 		transmit_finished = 1;
			; SOURCE LINE # 86
	SETB 	transmit_finished
; 		EA = 1;	
			; SOURCE LINE # 87
	SETB 	EA
; 	} 
			; SOURCE LINE # 88
; }
			; SOURCE LINE # 89
?C0005:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	DPX
	POP  	B
	POP  	ACC
	RETI 	
; END OF UART0_ISR

CSEG	AT	06053H
	LJMP	UART1_ISR

; #endif
; 
; 
; #if 1
; static void UART1_ISR(void) interrupt 6

	RSEG  ?PR?UART1_ISR?INT
	USING	0
UART1_ISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPX
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 94
; {
; 	flag_uart = UART1;
			; SOURCE LINE # 96
	MOV  	DPTR,#flag_uart
	MOV  	A,#01H
	MOVX 	@DPTR,A
; 	if (RI1)
			; SOURCE LINE # 97
	JNB  	RI1,?C0006
; 	{
			; SOURCE LINE # 98
; 		EA = 0;
			; SOURCE LINE # 99
	CLR  	EA
; 		
; 	/* refresh commnicaiton status LED */
; 		flag_uart = UART1;
			; SOURCE LINE # 102
	MOVX 	@DPTR,A
; 		flagLED_232 = 0;flagLED_485 = 1;
			; SOURCE LINE # 103
	CLR  	flagLED_232
	SETB 	flagLED_485
; 		CommCount = 0;
			; SOURCE LINE # 104
	MOV  	DPTR,#CommCount
	CLR  	A
	MOVX 	@DPTR,A
; 
; 		
; 		if(Modbus.PROTOCAL == MODBUS)
			; SOURCE LINE # 107
	MOV  	DPTR,#Modbus+0CH
	MOVX 	A,@DPTR
	JNZ  	?C0007
; 			handle_Modbus_RX1();
			; SOURCE LINE # 108
	LCALL	handle_Modbus_RX1
?C0007:
; 		
; 	//	flag_int = 0;
; 		RI1 = 0;
			; SOURCE LINE # 111
	CLR  	RI1
; 		EA = 1;
			; SOURCE LINE # 112
	SETB 	EA
; 	
; 	} 
			; SOURCE LINE # 114
	SJMP 	?C0010
?C0006:
; 	else if (TI1)
			; SOURCE LINE # 115
	JNB  	TI1,?C0010
; 	{
			; SOURCE LINE # 116
; 		EA = 0;
			; SOURCE LINE # 117
	CLR  	EA
; 		TI1 = 0;
			; SOURCE LINE # 118
	CLR  	TI1
; 		transmit_finished = 1;
			; SOURCE LINE # 119
	SETB 	transmit_finished
; 		EA = 1;	
			; SOURCE LINE # 120
	SETB 	EA
; 	} 	
			; SOURCE LINE # 121
; }
			; SOURCE LINE # 122
?C0010:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	DPX
	POP  	B
	POP  	ACC
	RETI 	
; END OF UART1_ISR

	END
