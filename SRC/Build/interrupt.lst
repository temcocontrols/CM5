C51 COMPILER V9.00   INTERRUPT                                                             05/08/2013 16:48:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE INTERRUPT
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\SRC\CPU\interrupt.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR
                    -(..\SRC\FreeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;
                    -..\SRC\UART\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Ca
                    -rd\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\manage
                    -ment\;..\SRC\dhcp\;..\SRC\pppoe\;..\SRC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\SR
                    -C\Scan) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\interrupt.lst) SRC(.\Build\interrupt.SRC)

line level    source

   1          /*
   2           *********************************************************************************
   3           *     Copyright (c) 2005       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           *********************************************************************************
  10           */
  11          /*================================================================================
  12           * Module Name : interrupt.c
  13           * Purpose     : This file include peripheral interrupt service routine and
  14           *               the wake up interrupt service routine.
  15           * Author      : Robin Lee
  16           * Date        : 2006-01-09
  17           * Notes       :
  18           * $Log: interrupt.c,v $
  19           * Revision 1.2  2006/04/20 01:22:56  robin6633
  20           * 1.Added watchdog timeout ISR.
  21           *
  22           * Revision 1.1  2006/04/07 11:36:17  robin6633
  23           * no message
  24           *
  25           *================================================================================
  26           */
  27          
  28          /* INCLUDE FILE DECLARATIONS */
  29          #include        "reg80390.h"
  30          #include        "types.h"
  31          #include        "interrupt.h"
  32          
  33          #if AX_LBI_INT_ENABLE
              #include        "lbi.h"
              #endif
  36          
  37          #if AX_ETH_INT_ENABLE
  38          #include        "mac.h"
  39          #endif
  40          
  41          #if AX_ETH_INT_ENABLE
  42          #include        "stoe.h"
  43          #endif
  44          
  45          #if AX_I2C_INT_ENABLE
  46          #include        "i2c.h"
  47          #endif
  48          
  49          #if AX_SPI_INT_ENABLE
              #include        "spi.h"
C51 COMPILER V9.00   INTERRUPT                                                             05/08/2013 16:48:49 PAGE 2   

              #endif
  52          
  53          #if AX_ONEWIRE_INT_ENABLE
              #include        "onewire.h"
              #endif
  56          
  57          #if AX_CAN_INT_ENABLE
              #include        "can.h"
              #endif
  60          
  61          #if AX_HSUART_INT_ENABLE
              #include        "hsuart.h"
              #endif
  64          
  65          
  66          /* NAMING CONSTANT DECLARATIONS */
  67          
  68          
  69          /* STATIC VARIABLE DECLARATIONS */
  70          
  71          
  72          /* LOCAL SUBPROGRAM DECLARATIONS */
  73          static void     ax11000_PeripherialISR(void);
  74          
  75          #if AX_POWER_MANAGEMENT_INT_ENABLE
              static void     ax11000_PmmISR(void);
              #endif
  78          
  79          #if AX_WATCHDOG_INT_ENB
              void    ax11000_WatchDogISR(void);
              #endif
  82          
  83          
  84          /* LOCAL SUBPROGRAM BODIES */
  85          
  86          /*
  87           *--------------------------------------------------------------------------------
  88           * static void ax11000_PeripherialISR(void)
  89           * Purpose : The interrupt service routine of Flipper peripheral devices.
  90           * Params  : None.
  91           * Returns : None.
  92           * Note    : None.
  93           *--------------------------------------------------------------------------------
  94           */
  95          static void ax11000_PeripherialISR(void) interrupt 9 //use external interrupt 4 (0x4B)
  96          {
  97   1              U8_T    intrStt1 = 0;
  98   1              U8_T    intrStt2 = 0;
  99   1      
 100   1              /* Interrupt type check */
 101   1              while (1)
 102   1              {
 103   2                      EA = 0;
 104   2                      intrStt1 = PISSR1;
 105   2                      intrStt2 = PISSR2;
 106   2                      EA = 1;
 107   2      
 108   2                      if ((intrStt1 == 0) && (intrStt2 == 0))
 109   2                              break;
 110   2      
 111   2      #if AX_LBI_INT_ENABLE
                              if (intrStt1 & LB_INT_STU)
C51 COMPILER V9.00   INTERRUPT                                                             05/08/2013 16:48:49 PAGE 3   

                              {
                                      LocalBusFunc();
                              }
              #endif
 117   2      
 118   2      #if AX_LBI_INT_ENABLE
                              if (intrStt1 & LB_EXT_INT_STU)
                              {
                                      LocalBusAccessCompleteFunc();
                              }
              #endif
 124   2      
 125   2      #if AX_ETH_INT_ENABLE
 126   2      #if (MAC_GET_INTSTATUS_MODE == MAC_INTERRUPT_MODE)
 127   2                      if (intrStt1 & ETH_INT_STU)
 128   2                      {
 129   3                              MAC_SetInterruptFlag();
 130   3                      }
 131   2      #endif
 132   2      #endif
 133   2      
 134   2      #if AX_ETH_INT_ENABLE
 135   2      #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
                              if (intrStt1 & TOE_INT_STU)
                              {
                                      STOE_SetInterruptFlag();
                              }
              #endif
 141   2      #endif
 142   2      
 143   2      #if AX_CAN_INT_ENABLE
                              if (intrStt1 & CAN_INT_STU)
                              {
                                      CAN_Func();
                              }
              #endif
 149   2      
 150   2      #if AX_I2C_INT_ENABLE
 151   2                      if (intrStt1 & I2C_INT_STU)
 152   2                      {
 153   3                              I2C_Func();
 154   3                      }
 155   2      #endif
 156   2      
 157   2      #if AX_SPI_INT_ENABLE
                              if (intrStt1 & SPI_INT_STU)
                              {
                                      SPI_Func();
                              }
              #endif
 163   2      
 164   2      #if AX_ONEWIRE_INT_ENABLE
                              if (intrStt1 & OW_INT_STU)
                              {
                                      ONEWIRE_Func();
                              }
              #endif
 170   2      
 171   2      #if AX_HSUART_INT_ENABLE
                              if (intrStt2 & UART2_INT_STU)
                              {
                                      HSUR_Func();
C51 COMPILER V9.00   INTERRUPT                                                             05/08/2013 16:48:49 PAGE 4   

                              }
              #endif
 177   2              }
 178   1      }
 179          
 180          #if AX_POWER_MANAGEMENT_INT_ENABLE
              /*
               *--------------------------------------------------------------------------------
               * static void ax11000_PmmISR(void)
               * Purpose : The interrupt service routine of the
               *           wake up event in power management mode.
               * Params  : None.
               * Returns : None.
               * Note    : None.
               *--------------------------------------------------------------------------------
               */
              static void ax11000_PmmISR(void) interrupt 11 //use external interrupt 6 (0x5B)
              {
                      U8_T    wakeStatus = 0;
                      U8_T    mode = 0;
                      U8_T    sysClk = 0;
                      U8_T    canReg = 0;
                      U8_T    intEnb = 0;
              
                      EA = 0;
                      EIF &= ~INT6F;  // Clear the flag of interrupt 6.
                      EA = 1;
              
                      
              
                      wakeStatus = PCON;
                      if (!(wakeStatus & SWB_))
                      {
                              PCON &= ~ (PMM_ | STOP_);
                      }
              
              #if AX_ETH_INT_ENABLE
                      /* Ethernet wake up function */
                      /* disable wake up interrupt */
                      MDR  = 0;
                      MCIR = MAC_STOP_PMM_INT_ENABLE_REG;
                      /* clear MAC status register */
                      CLI_MacRd((ULONG)MAC_STOP_PMM_INT_STATUS_REG, &WakeStatus, 1);
                      STOE_Standby = 0;
              #endif
              
              #if AX_CAN_INT_ENABLE
                      /* CAN wake up function */
                      CAN_WakeUpEvent(0); // 0 for exit power management mode
              #endif
              }
              #endif
 227          
 228          #if AX_WATCHDOG_INT_ENB
              /*
               *--------------------------------------------------------------------------------
               * void ax11000_WatchDogISR(void)
               * Purpose : The interrupt service routine of the AX11000 Watchdog timeout.
               * Params  : None
               * Returns : None
               * Note    : None
               *--------------------------------------------------------------------------------
C51 COMPILER V9.00   INTERRUPT                                                             05/08/2013 16:48:49 PAGE 5   

               */
              void ax11000_WatchDogISR(void) interrupt 12
              {
                      if (EWDI)
                      {
                              if (EWT)
                              {
                                      TA = 0xAA;
                                      TA = 0x55;
                                      WDIF = 0; // clear WatchDog Interrupt Flag.
                                      WTRF = 0; // clear the Watchdog Timer Reset Flag.
                                      RWT = 1; // reset watchdog timer.
                              }
                              else
                              {
                                      TA = 0xAA;
                                      TA = 0x55;
                                      WDIF = 0; //clear WatchDog Interrupt Flag.
                                      RWT = 1; // reset watchdog timer.
                              }
                      }
              }
              #endif
 260          
 261          
 262          /* EXPORTED SUBPROGRAM BODIES */
 263          
 264          
 265          /* End of interrupt.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    117    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
