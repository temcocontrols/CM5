AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     1


MACRO ASSEMBLER AX51 V3.06h
OBJECT MODULE PLACED IN .\Build\port.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.EXE .\Build\port.src PR(.\Build\port.ls1) EP DEBUG MOD_CONT

LOC    OBJ             LINE     SOURCE

                          1     ; .\Build\port.SRC generated from: ..\SRC\FreeRTOSSource\portable\Keil\AX11000\port.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        C:\Keil\C51\BIN\C51.EXE ..\SRC\FreeRTOSSource\portable\Keil\AX11000\port.c LARG
                               E OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\FreeRTOSSource\include\;..\SRC\Fr
                               eeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UAR
                               T\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\
                               SRC\main;..\SRC\SD_Card\;..\SRC\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\S
                               RC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\SRC\dhcp\;..\SRC\pppoe\;..\S
                               RC\flash;..\SRC\SNTP;..\SRC\display;..\SRC\key;..\SRC\schedule;..\SRC\program;..\SRC\Scan
                               ) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\port.lst) SRC(.\Build\port.SRC)
                          4     
                          5     $mod_cont 
                          6     $nomod51 
                          7     
                          8     NAME    PORT
                          9     
 0098.3                  10     TB08    BIT     098H.3
 00C0.3                  11     TB18    BIT     0C0H.3
 0080                    12     P0      DATA    080H
 0098.7                  13     SM00    BIT     098H.7
 0090                    14     P1      DATA    090H
 00C0.7                  15     SM10    BIT     0C0H.7
 0098.6                  16     SM01    BIT     098H.6
 00A0                    17     P2      DATA    0A0H
 00C0.6                  18     SM11    BIT     0C0H.6
 0098.5                  19     SM02    BIT     098H.5
 00B0                    20     P3      DATA    0B0H
 00D0.6                  21     AC      BIT     0D0H.6
 00C0.5                  22     SM12    BIT     0C0H.5
 00B0.4                  23     T0      BIT     0B0H.4
 00CF                    24     SPIDR   DATA    0CFH
 00B0.5                  25     T1      BIT     0B0H.5
 00A8.7                  26     EA      BIT     0A8H.7
 00D6                    27     OWCIR   DATA    0D6H
 00C5                    28     CH      DATA    0C5H
 0083                    29     DPH0    DATA    083H
 00A8                    30     IE      DATA    0A8H
 0085                    31     DPH1    DATA    085H
 00C4                    32     CL      DATA    0C4H
 0080.0                  33     P0_0    BIT     080H.0
 0090.0                  34     P1_0    BIT     090H.0
 0080.1                  35     P0_1    BIT     080H.1
 00B9                    36     CCAPH0  DATA    0B9H
 0082                    37     DPL0    DATA    082H
 00A0.0                  38     P2_0    BIT     0A0H.0
 0090.1                  39     P1_1    BIT     090H.1
 0080.2                  40     P0_2    BIT     080H.2
 00BA                    41     CCAPH1  DATA    0BAH
 0084                    42     DPL1    DATA    084H
 00B0.0                  43     P3_0    BIT     0B0H.0
 00A0.1                  44     P2_1    BIT     0A0H.1
 0090.2                  45     P1_2    BIT     090H.2
 0080.3                  46     P0_3    BIT     080H.3
 00E2                    47     UR2_DLH DATA    0E2H
 00BB                    48     CCAPH2  DATA    0BBH
 00A7                    49     XMRHR   DATA    0A7H
 00B0.1                  50     P3_1    BIT     0B0H.1
 00A0.2                  51     P2_2    BIT     0A0H.2
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     2

 0090.3                  52     P1_3    BIT     090H.3
 0080.4                  53     P0_4    BIT     080H.4
 00BC                    54     CCAPH3  DATA    0BCH
 00B0.2                  55     P3_2    BIT     0B0H.2
 00A0.3                  56     P2_3    BIT     0A0H.3
 0090.4                  57     P1_4    BIT     090H.4
 0080.5                  58     P0_5    BIT     080H.5
 00EB                    59     TA      DATA    0EBH
 00BD                    60     CCAPH4  DATA    0BDH
 00B1                    61     CCAPL0  DATA    0B1H
 00C8.6                  62     EXF2    BIT     0C8H.6
 00B0.7                  63     RD      BIT     0B0H.7
 00B0.3                  64     P3_3    BIT     0B0H.3
 00A0.4                  65     P2_4    BIT     0A0H.4
 0098.4                  66     REN0    BIT     098H.4
 0090.5                  67     P1_5    BIT     090H.5
 0080.6                  68     P0_6    BIT     080H.6
 00E3                    69     UR2_FCR DATA    0E3H
 00D1                    70     CCAPM0  DATA    0D1H
 00C9                    71     T2IF    DATA    0C9H
 00B2                    72     CCAPL1  DATA    0B2H
 00C0.4                  73     REN1    BIT     0C0H.4
 00B0.4                  74     P3_4    BIT     0B0H.4
 00A0.5                  75     P2_5    BIT     0A0H.5
 0090.6                  76     P1_6    BIT     090H.6
 0080.7                  77     P0_7    BIT     080H.7
 00E1                    78     UR2_DLL DATA    0E1H
 00D2                    79     CCAPM1  DATA    0D2H
 00B3                    80     CCAPL2  DATA    0B3H
 00A6                    81     XMRLR   DATA    0A6H
 00B0.5                  82     P3_5    BIT     0B0H.5
 00A0.6                  83     P2_6    BIT     0A0H.6
 0090.7                  84     P1_7    BIT     090H.7
 00D3                    85     CCAPM2  DATA    0D3H
 00B4                    86     CCAPL3  DATA    0B4H
 00A5                    87     XMWHR   DATA    0A5H
 00B0.6                  88     P3_6    BIT     0B0H.6
 00A0.7                  89     P2_7    BIT     0A0H.7
 00D4                    90     CCAPM3  DATA    0D4H
 00B8                    91     IP      DATA    0B8H
 00B5                    92     CCAPL4  DATA    0B5H
 00B0.7                  93     P3_7    BIT     0B0H.7
 00D5                    94     CCAPM4  DATA    0D5H
 009A                    95     DBAR    DATA    09AH
 00E2                    96     UR2_IER DATA    0E2H
 00D0.7                  97     CY      BIT     0D0H.7
 00B0.2                  98     INT0    BIT     0B0H.2
 00E4                    99     UR2_LCR DATA    0E4H
 00A4                   100     XMWLR   DATA    0A4H
 00B0.3                 101     INT1    BIT     0B0H.3
 00E5                   102     UR2_MCR DATA    0E5H
 0093                   103     DPX0    DATA    093H
 0096                   104     I2CCIR  DATA    096H
 0095                   105     DPX1    DATA    095H
 00E3                   106     UR2_IIR DATA    0E3H
 00E1                   107     UR2_RBR DATA    0E1H
 009D                   108     ACON    DATA    09DH
 009B                   109     DCIR    DATA    09BH
 0081                   110     SP      DATA    081H
 00C3                   111     CCON    DATA    0C3H
 00C2                   112     CMOD    DATA    0C2H
 00D0.2                 113     OV      BIT     0D0H.2
 00B0.6                 114     WR      BIT     0B0H.6
 00E1                   115     UR2_THR DATA    0E1H
 00E8.5                 116     EWDI    BIT     0E8H.5
 00D8.3                 117     WDIF    BIT     0D8H.3
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     3

 00CB                   118     RLDH    DATA    0CBH
 00BE                   119     EPCR    DATA    0BEH
 00AA                   120     LDHR    DATA    0AAH
 00E6                   121     UR2_LSR DATA    0E6H
 00BF                   122     EPDR    DATA    0BFH
 00B6                   123     MCIR    DATA    0B6H
 00C8.5                 124     RCLK    BIT     0C8H.5
 00E7                   125     UR2_MSR DATA    0E7H
 00C8.4                 126     TCLK    BIT     0C8H.4
 00CA                   127     RLDL    DATA    0CAH
 00A9                   128     LDLR    DATA    0A9H
 0087                   129     PCON    DATA    087H
 00DE                   130     CANCIR  DATA    0DEH
 00AE                   131     TCIR    DATA    0AEH
 00F8.5                 132     PWDI    BIT     0F8H.5
 00A2                   133     LSCR    DATA    0A2H
 0089                   134     TMOD    DATA    089H
 0088                   135     TCON    DATA    088H
 00D7                   136     OWDR    DATA    0D7H
 0088.1                 137     IE0     BIT     088H.1
 0088.3                 138     IE1     BIT     088H.3
 00EA                   139     MXAX    DATA    0EAH
 00A1                   140     LMSR    DATA    0A1H
 00F9                   141     MD0     DATA    0F9H
 00F0                   142     B       DATA    0F0H
 00FA                   143     MD1     DATA    0FAH
 00A1                   144     LSAIER  DATA    0A1H
 00FB                   145     MD2     DATA    0FBH
 00D8.2                 146     WTRF    BIT     0D8H.2
 00FC                   147     MD3     DATA    0FCH
 009E                   148     PISSR1  DATA    09EH
 00FD                   149     MD4     DATA    0FDH
 00A3                   150     LSSR    DATA    0A3H
 009F                   151     PISSR2  DATA    09FH
 00FE                   152     MD5     DATA    0FEH
 00E0                   153     ACC     DATA    0E0H
 00A8.4                 154     ES0     BIT     0A8H.4
 00C8.1                 155     CT2     BIT     0C8H.1
 00A8.6                 156     ES1     BIT     0A8H.6
 00A8.1                 157     ET0     BIT     0A8H.1
 00A8.3                 158     ET1     BIT     0A8H.3
 0088.5                 159     TF0     BIT     088H.5
 00A8.5                 160     ET2     BIT     0A8H.5
 0098.0                 161     RI0     BIT     098H.0
 0088.7                 162     TF1     BIT     088H.7
 00C8.7                 163     TF2     BIT     0C8H.7
 00C0.0                 164     RI1     BIT     0C0H.0
 00CE                   165     SPICIR  DATA    0CEH
 008C                   166     TH0     DATA    08CH
 00A8.0                 167     EX0     BIT     0A8H.0
 0098.1                 168     TI0     BIT     098H.1
 0088.0                 169     IT0     BIT     088H.0
 008D                   170     TH1     DATA    08DH
 00C0.1                 171     TI1     BIT     0C0H.1
 00A8.2                 172     EX1     BIT     0A8H.2
 0088.2                 173     IT1     BIT     088H.2
 00CD                   174     TH2     DATA    0CDH
 00D0.0                 175     P       BIT     0D0H.0
 008A                   176     TL0     DATA    08AH
 008F                   177     CSREPR  DATA    08FH
 008B                   178     TL1     DATA    08BH
 00CC                   179     TL2     DATA    0CCH
 00B8.4                 180     PS0     BIT     0B8H.4
 00E8                   181     EIE     DATA    0E8H
 0092                   182     WTST    DATA    092H
 00B8.6                 183     PS1     BIT     0B8H.6
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     4

 00B8.1                 184     PT0     BIT     0B8H.1
 0091                   185     EIF     DATA    091H
 00D0.3                 186     RS0     BIT     0D0H.3
 00B8.3                 187     PT1     BIT     0B8H.3
 0097                   188     I2CDR   DATA    097H
 00D0.4                 189     RS1     BIT     0D0H.4
 00B8.5                 190     PT2     BIT     0B8H.5
 0088.4                 191     TR0     BIT     088H.4
 0088.6                 192     TR1     BIT     088H.6
 00C8.2                 193     TR2     BIT     0C8H.2
 00B8.0                 194     PX0     BIT     0B8H.0
 00B8.2                 195     PX1     BIT     0B8H.2
 009C                   196     DDR     DATA    09CH
 0083                   197     DPH     DATA    083H
 00F8                   198     EIP     DATA    0F8H
 0082                   199     DPL     DATA    082H
 00A2                   200     LCR     DATA    0A2H
 0099                   201     SBUF0   DATA    099H
 00C1                   202     SBUF1   DATA    0C1H
 00E8.0                 203     EINT2   BIT     0E8H.0
 00C8.3                 204     EXEN2   BIT     0C8H.3
 00B7                   205     MDR     DATA    0B7H
 00E8.1                 206     EINT3   BIT     0E8H.1
 00C8.0                 207     CPRL2   BIT     0C8H.0
 0098                   208     SCON0   DATA    098H
 00E8.2                 209     EINT4   BIT     0E8H.2
 00C0                   210     SCON1   DATA    0C0H
 0094                   211     SDSTSR  DATA    094H
 00E8.3                 212     EINT5   BIT     0E8H.3
 00E9                   213     STATUS  DATA    0E9H
 00E8.4                 214     EINT6   BIT     0E8H.4
 00C8                   215     T2CON   DATA    0C8H
 0086                   216     DPS     DATA    086H
 00DF                   217     CANDR   DATA    0DFH
 00AF                   218     TDR     DATA    0AFH
 00A5                   219     LDAHR   DATA    0A5H
 0093                   220     DPX     DATA    093H
 00AD                   221     DMAHR   DATA    0ADH
 00F8.0                 222     PINT2   BIT     0F8H.0
 00B0.0                 223     RXD     BIT     0B0H.0
 00F8.1                 224     PINT3   BIT     0F8H.1
 008E                   225     CKCON   DATA    08EH
 00F8.2                 226     PINT4   BIT     0F8H.2
 00D8.1                 227     EWT     BIT     0D8H.1
 00B0.1                 228     TXD     BIT     0B0H.1
 00A4                   229     LDALR   DATA    0A4H
 00F8.3                 230     PINT5   BIT     0F8H.3
 00AB                   231     DMALR   DATA    0ABH
 00A3                   232     LSR     DATA    0A3H
 00F8.4                 233     PINT6   BIT     0F8H.4
 00AC                   234     DMAMR   DATA    0ACH
 00FF                   235     ARCON   DATA    0FFH
 00D0.5                 236     F0      BIT     0D0H.5
 00D0.1                 237     F1      BIT     0D0H.1
 00A6                   238     LDCSR   DATA    0A6H
 00D0                   239     PSW     DATA    0D0H
 0098.2                 240     RB08    BIT     098H.2
 00D8                   241     WDCON   DATA    0D8H
 00D8.0                 242     RWT     BIT     0D8H.0
 00C0.2                 243     RB18    BIT     0C0H.2
------                  244     ?PR?_?pxPortInitialiseStack?PORT         SEGMENT ECODE INSEG 
------                  245     ?PR?_?sPortStartScheduler?PORT           SEGMENT ECODE INSEG 
------                  246     ?PR?_?vPortEndScheduler?PORT             SEGMENT ECODE INSEG 
------                  247     ?PR?_?vPortContextSwitch?PORT            SEGMENT ECODE INSEG 
------                  248     ?PR?_?OSIntCtxSw?PORT                    SEGMENT ECODE INSEG 
------                  249     ?PR?_?vIntPortContextSwitch?PORT         SEGMENT ECODE INSEG 
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     5

------                  250     ?PR?vTimer2ISR?PORT  SEGMENT ECODE INSEG 
------                  251     ?XD?vTimer2ISR?PORT  SEGMENT XDATA OVERLAYABLE
------                  252     ?PR?prvSetupTimerInterrupt?PORT          SEGMENT ECODE INSEG 
------                  253     ?XD?prvSetupTimerInterrupt?PORT          SEGMENT XDATA OVERLAYABLE
------                  254     ?DT?PORT             SEGMENT DATA 
                        255             EXTRN   CODE (_?prvGetCurrentTCB_XBP)
                        256             EXTRN   CODE (_?prvSetCurrentTCB_XBP)
                        257             EXTRN   CODE (PWMoutput)
                        258             EXTRN   CODE (_?LoadCtx)
                        259             EXTRN   CODE (_?vTaskIncrementTick)
                        260             EXTRN   CODE (_DMA_WriteReg)
                        261             EXTRN   IDATA (STACK_START)
                        262             EXTRN   CODE (_?vTaskSwitchContext)
                        263             EXTRN   DATA (TICK_INT)
                        264             EXTRN   CODE (?C?ADDXBP)
                        265             EXTRN   CODE (?C?XBPOFF)
                        266             EXTRN   DATA (?C_XBP)
                        267             EXTRN   NUMBER (?C?XDATASEG)
                        268             EXTRN   CODE (?C?IILDX)
                        269             EXTRN   CODE (?C?PSTPTR)
                        270             EXTRN   CODE (?C?ISTPTR)
                        271             EXTRN   CODE (?C?ULSHR)
                        272             EXTRN   CODE (?C?CSTPTR)
                        273             PUBLIC  SaveSP
                        274             PUBLIC  vTimer2ISR
                        275             PUBLIC  _?vIntPortContextSwitch
                        276             PUBLIC  _?OSIntCtxSw
                        277             PUBLIC  _?vPortContextSwitch
                        278             PUBLIC  _?vPortEndScheduler
                        279             PUBLIC  _?sPortStartScheduler
                        280             PUBLIC  _?pxPortInitialiseStack
                        281     
------                  282             RSEG  ?XD?vTimer2ISR?PORT
000000                  283     ?vTimer2ISR?BYTE:
000000                  284             isr?640:   DS   1
                        285     
------                  286             RSEG  ?XD?prvSetupTimerInterrupt?PORT
000000                  287     ?prvSetupTimerInterrupt?BYTE:
000000                  288            temp?741:   DS   2
                        289     
------                  290             RSEG  ?DT?PORT
000000                  291              SaveSP:   DS   1
                        292     ; /*
                        293     ;       FreeRTOS V2.6.0 - Copyright (C) 2003 - 2005 Richard Barry.
                        294     ; 
                        295     ;       This file is part of the FreeRTOS distribution.
                        296     ; 
                        297     ;       FreeRTOS is free software; you can redistribute it and/or modify
                        298     ;       it under the terms of the GNU General Public License as published by
                        299     ;       the Free Software Foundation; either version 2 of the License, or
                        300     ;       (at your option) any later version.
                        301     ; 
                        302     ;       FreeRTOS is distributed in the hope that it will be useful,
                        303     ;       but WITHOUT ANY WARRANTY; without even the implied warranty of
                        304     ;       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        305     ;       GNU General Public License for more details.
                        306     ; 
                        307     ;       You should have received a copy of the GNU General Public License
                        308     ;       along with FreeRTOS; if not, write to the Free Software
                        309     ;       Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
                        310     ; 
                        311     ;       A special exception to the GPL can be applied should you wish to distribute
                        312     ;       a combined work that includes FreeRTOS, without being obliged to provide
                        313     ;       the source code for any proprietary components.  See the licensing section 
                        314     ;       of http://www.FreeRTOS.org for full details of how and when the exception
                        315     ;       can be applied.
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     6

                        316     ; 
                        317     ;       ***************************************************************************
                        318     ;       See http://www.FreeRTOS.org for documentation, latest information, license 
                        319     ;       and contact details.  Please ensure to read the configuration and relevant 
                        320     ;       port sections of the online documentation.
                        321     ;       ***************************************************************************
                        322     ; */
                        323     ; 
                        324     ; /*-----------------------------------------------------------
                        325     ;  * Implementation of functions defined in portable.h for the Cygnal port.
                        326     ;  *----------------------------------------------------------*/
                        327     ; //#pragma SRC 
                        328     ; /* Standard includes. */
                        329     ; #include <string.h>
                        330     ; 
                        331     ; /* Scheduler includes. */
                        332     ; #include "projdefs.h"
                        333     ; #include "portable.h"
                        334     ; #include "task.h"
                        335     ; #include "queue.h"
                        336     ; #include "mstimer.h"
                        337     ; #include "interrupt.h"
                        338     ; #include "dma.h"
                        339     ; 
                        340     ; /* Constants required to setup timer 2 to produce the RTOS tick. */
                        341     ; //#define portCLOCK_DIVISOR                           ( ( unsigned portLONG ) 12 )
                        342     ; //#define portMAX_TIMER_VALUE                         ( ( unsigned portLONG ) 0xffff )
                        343     ; //#define portENABLE_TIMER                            ( ( unsigned portCHAR ) 0x04 )
                        344     ; //#define portTIMER_2_INTERRUPT_ENABLE        ( ( unsigned portCHAR ) 0x20 )
                        345     ; 
                        346     ; /* The value used in the IE register when a task first starts. */
                        347     ; #define portGLOBAL_INTERRUPT_BIT      ( ( portSTACK_TYPE ) 0x80 )
                        348     ; 
                        349     ; /* The value used in the PSW register when a task first starts. */
                        350     ; #define portINITIAL_PSW                               ( ( portSTACK_TYPE ) 0x00 )
                        351     ; 
                        352     ; /* Macro to clear the timer 2 interrupt flag. */
                        353     ; #define portCLEAR_INTERRUPT_FLAG()    {                                       \
                        354     ;                                                                               EINT5 = 
                               0;              \
                        355     ;                                                                               EIF &= ~
                               INT5F;  \
                        356     ;                                                                               EINT5 = 
                               1;              \
                        357     ;                                                                       }
                        358     ;                                                                                       
                        359     ; /* Used during a context switch to store the size of the stack being copied
                        360     ; to or from XRAM. */
                        361     ; //data static unsigned portCHAR ucStackBytes;
                        362     ; //data  unsigned portCHAR ucStackBytes;
                        363     ; 
                        364     ; /* Used during a context switch to point to the next byte in XRAM from/to which
                        365     ; a RAM byte is to be copied. */
                        366     ; //xdata static portSTACK_TYPE * data pxXRAMStack;
                        367     ; //static portSTACK_TYPE xdata * data pxXRAMStack;
                        368     ; 
                        369     ; /* Used during a context switch to point to the next byte in RAM from/to which
                        370     ; an XRAM byte is to be copied. */
                        371     ; //data static portSTACK_TYPE * data pxRAMStack;
                        372     ; //static  portSTACK_TYPE data * data pxRAMStack;
                        373     ; 
                        374     ; /* We require the address of the pxCurrentTCB variable, but don't want to know
                        375     ; any details of its type. */
                        376     ; //typedef void tskTCB;
                        377     ; //extern volatile tskTCB * volatile pxCurrentTCB;
                        378     ; 
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     7

                        379     ; void LoadCtx() reentrant;   /* Save the current working registers to stack, defined in
                                OS_CPU_A.ASM */
                        380     ; extern INT8U xdata * data C_XBP, TICK_INT;
                        381     ; 
                        382     ; 
                        383     ; /*
                        384     ;  * Setup the hardware to generate an interrupt off timer 2 at the required 
                        385     ;  * frequency.
                        386     ;  */
                        387     ; static void prvSetupTimerInterrupt( void );
                        388     ; 
                        389     ; 
                        390     ; /* 
                        391     ;  * See header file for description. 
                        392     ;  */
                        393     ; portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCod
                               e, void *pvParameters ) reentrant
                        394     
------                  395             RSEG  ?PR?_?pxPortInitialiseStack?PORT
000000                  396     _?pxPortInitialiseStack:
                        397             USING   0
                        398                             ; SOURCE LINE # 102
000000 9000FFFD         399             MOV     DPTR,#0FFFDH
000004 12000000   E     400             LCALL   ?C?ADDXBP
000008 EB               401             MOV     A,R3
000009 F0               402             MOVX    @DPTR,A
00000A A3               403             INC     DPTR
00000B EA               404             MOV     A,R2
00000C F0               405             MOVX    @DPTR,A
00000D A3               406             INC     DPTR
00000E E9               407             MOV     A,R1
00000F F0               408             MOVX    @DPTR,A
000010 9000FFFD         409             MOV     DPTR,#0FFFDH
000014 12000000   E     410             LCALL   ?C?ADDXBP
                        411     ; {
                        412     ;     portSTACK_TYPE * stk;
                        413     ; 
                        414     ;     stk    = (portSTACK_TYPE *) pxTopOfStack;        /* Load stack pointer            
                                                         */
                        415                             ; SOURCE LINE # 106
000018 90000003         416             MOV     DPTR,#03H
00001C 12000000   E     417             LCALL   ?C?XBPOFF
000020 E0               418             MOVX    A,@DPTR
000021 F9               419             MOV     R1,A
000022 A3               420             INC     DPTR
000023 E0               421             MOVX    A,@DPTR
000024 FA               422             MOV     R2,A
000025 A3               423             INC     DPTR
000026 E0               424             MOVX    A,@DPTR
000027 850083     E     425             MOV     DPH,?C_XBP
00002A 850082     E     426             MOV     DPL,?C_XBP+01H
00002D 759300     E     427             MOV     DPX,#?C?XDATASEG
000030 C9               428             XCH     A,R1
000031 F0               429             MOVX    @DPTR,A
000032 A3               430             INC     DPTR
000033 EA               431             MOV     A,R2
000034 F0               432             MOVX    @DPTR,A
000035 A3               433             INC     DPTR
000036 E9               434             MOV     A,R1
000037 F0               435             MOVX    @DPTR,A
                        436     ; 
                        437     ;       stk                             -= sizeof(void *);              /* Save the pvPa
                               rameters to external stack */
                        438                             ; SOURCE LINE # 108
000038 850083     E     439             MOV     DPH,?C_XBP
00003B 850082     E     440             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     8

00003E 759300     E     441             MOV     DPX,#?C?XDATASEG
000041 A3               442             INC     DPTR
000042 74FF             443             MOV     A,#0FFH
000044 75F0FD           444             MOV     B,#0FDH
000047 12000000   E     445             LCALL   ?C?IILDX
                        446     ;       *(void**)stk     = pvParameters;        /*                               */
                        447                             ; SOURCE LINE # 109
00004B 90000009         448             MOV     DPTR,#09H
00004F 12000000   E     449             LCALL   ?C?XBPOFF
000053 E0               450             MOVX    A,@DPTR
000054 FB               451             MOV     R3,A
000055 A3               452             INC     DPTR
000056 E0               453             MOVX    A,@DPTR
000057 FA               454             MOV     R2,A
000058 A3               455             INC     DPTR
000059 E0               456             MOVX    A,@DPTR
00005A F9               457             MOV     R1,A
00005B C003             458             PUSH    AR3
00005D C002             459             PUSH    AR2
00005F C001             460             PUSH    AR1
000061 850083     E     461             MOV     DPH,?C_XBP
000064 850082     E     462             MOV     DPL,?C_XBP+01H
000067 759300     E     463             MOV     DPX,#?C?XDATASEG
00006A E0               464             MOVX    A,@DPTR
00006B FB               465             MOV     R3,A
00006C A3               466             INC     DPTR
00006D E0               467             MOVX    A,@DPTR
00006E FA               468             MOV     R2,A
00006F A3               469             INC     DPTR
000070 E0               470             MOVX    A,@DPTR
000071 F9               471             MOV     R1,A
000072 12000000   E     472             LCALL   ?C?PSTPTR
                        473     ; 
                        474     ;       stk                             -= sizeof(INT16U);                              
                                               /* The value should be loaded to PC    */
                        475                             ; SOURCE LINE # 111
000076 850083     E     476             MOV     DPH,?C_XBP
000079 850082     E     477             MOV     DPL,?C_XBP+01H
00007C 759300     E     478             MOV     DPX,#?C?XDATASEG
00007F A3               479             INC     DPTR
000080 74FF             480             MOV     A,#0FFH
000082 75F0FE           481             MOV     B,#0FEH
000085 12000000   E     482             LCALL   ?C?IILDX
                        483     ;       *(INT16U*)stk    = (INT16U) pxCode;                                             
                               /* next time when this task is running */
                        484                             ; SOURCE LINE # 112
000089 90000006         485             MOV     DPTR,#06H
00008D 12000000   E     486             LCALL   ?C?XBPOFF
000091 A3               487             INC     DPTR
000092 E0               488             MOVX    A,@DPTR
000093 FA               489             MOV     R2,A
000094 A3               490             INC     DPTR
000095 E0               491             MOVX    A,@DPTR
000096 AE02             492             MOV     R6,AR2
000098 FF               493             MOV     R7,A
000099 850083     E     494             MOV     DPH,?C_XBP
00009C 850082     E     495             MOV     DPL,?C_XBP+01H
00009F 759300     E     496             MOV     DPX,#?C?XDATASEG
0000A2 E0               497             MOVX    A,@DPTR
0000A3 FB               498             MOV     R3,A
0000A4 A3               499             INC     DPTR
0000A5 E0               500             MOVX    A,@DPTR
0000A6 FA               501             MOV     R2,A
0000A7 A3               502             INC     DPTR
0000A8 E0               503             MOVX    A,@DPTR
0000A9 F9               504             MOV     R1,A
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE     9

0000AA EE               505             MOV     A,R6
0000AB 8FF0             506             MOV     B,R7
0000AD 12000000   E     507             LCALL   ?C?ISTPTR
                        508     ; 
                        509     ;       *--stk                   = (portSTACK_TYPE )(((INT32U) pxCode>>16)+0x7F);      /
                               * Third byte of PC for dallas 390 */
                        510                             ; SOURCE LINE # 114
0000B1 90000006         511             MOV     DPTR,#06H
0000B5 12000000   E     512             LCALL   ?C?XBPOFF
0000B9 E0               513             MOVX    A,@DPTR
0000BA FB               514             MOV     R3,A
0000BB A3               515             INC     DPTR
0000BC E0               516             MOVX    A,@DPTR
0000BD FA               517             MOV     R2,A
0000BE A3               518             INC     DPTR
0000BF E0               519             MOVX    A,@DPTR
0000C0 F9               520             MOV     R1,A
0000C1 FF               521             MOV     R7,A
0000C2 AE02             522             MOV     R6,AR2
0000C4 AD03             523             MOV     R5,AR3
0000C6 7C00             524             MOV     R4,#00H
0000C8 7810             525             MOV     R0,#010H
0000CA 12000000   E     526             LCALL   ?C?ULSHR
0000CE EF               527             MOV     A,R7
0000CF 247F             528             ADD     A,#07FH
0000D1 FF               529             MOV     R7,A
0000D2 850083     E     530             MOV     DPH,?C_XBP
0000D5 850082     E     531             MOV     DPL,?C_XBP+01H
0000D8 759300     E     532             MOV     DPX,#?C?XDATASEG
0000DB E0               533             MOVX    A,@DPTR
0000DC FB               534             MOV     R3,A
0000DD A3               535             INC     DPTR
0000DE 74FF             536             MOV     A,#0FFH
0000E0 F5F0             537             MOV     B,A
0000E2 12000000   E     538             LCALL   ?C?IILDX
0000E6 A9F0             539             MOV     R1,B
0000E8 FA               540             MOV     R2,A
0000E9 EF               541             MOV     A,R7
0000EA 12000000   E     542             LCALL   ?C?CSTPTR
                        543     ; 
                        544     ; /* Following is the registers pushed into hardware stack */
                        545     ;       *--stk                   = 'A';                 /* ACC */
                        546                             ; SOURCE LINE # 117
0000EE 850083     E     547             MOV     DPH,?C_XBP
0000F1 850082     E     548             MOV     DPL,?C_XBP+01H
0000F4 759300     E     549             MOV     DPX,#?C?XDATASEG
0000F7 E0               550             MOVX    A,@DPTR
0000F8 FB               551             MOV     R3,A
0000F9 A3               552             INC     DPTR
0000FA 74FF             553             MOV     A,#0FFH
0000FC F5F0             554             MOV     B,A
0000FE 12000000   E     555             LCALL   ?C?IILDX
000102 A9F0             556             MOV     R1,B
000104 FA               557             MOV     R2,A
000105 7441             558             MOV     A,#041H
000107 12000000   E     559             LCALL   ?C?CSTPTR
                        560     ;       *--stk                   = 'B';                 /* B   */
                        561                             ; SOURCE LINE # 118
00010B 850083     E     562             MOV     DPH,?C_XBP
00010E 850082     E     563             MOV     DPL,?C_XBP+01H
000111 759300     E     564             MOV     DPX,#?C?XDATASEG
000114 E0               565             MOVX    A,@DPTR
000115 FB               566             MOV     R3,A
000116 A3               567             INC     DPTR
000117 74FF             568             MOV     A,#0FFH
000119 F5F0             569             MOV     B,A
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    10

00011B 12000000   E     570             LCALL   ?C?IILDX
00011F A9F0             571             MOV     R1,B
000121 FA               572             MOV     R2,A
000122 7442             573             MOV     A,#042H
000124 12000000   E     574             LCALL   ?C?CSTPTR
                        575     ;       *--stk                   = 'X';                 /* DPX */
                        576                             ; SOURCE LINE # 119
000128 850083     E     577             MOV     DPH,?C_XBP
00012B 850082     E     578             MOV     DPL,?C_XBP+01H
00012E 759300     E     579             MOV     DPX,#?C?XDATASEG
000131 E0               580             MOVX    A,@DPTR
000132 FB               581             MOV     R3,A
000133 A3               582             INC     DPTR
000134 74FF             583             MOV     A,#0FFH
000136 F5F0             584             MOV     B,A
000138 12000000   E     585             LCALL   ?C?IILDX
00013C A9F0             586             MOV     R1,B
00013E FA               587             MOV     R2,A
00013F 7458             588             MOV     A,#058H
000141 12000000   E     589             LCALL   ?C?CSTPTR
                        590     ;       *--stk                   = 'H';                 /* DPH */
                        591                             ; SOURCE LINE # 120
000145 850083     E     592             MOV     DPH,?C_XBP
000148 850082     E     593             MOV     DPL,?C_XBP+01H
00014B 759300     E     594             MOV     DPX,#?C?XDATASEG
00014E E0               595             MOVX    A,@DPTR
00014F FB               596             MOV     R3,A
000150 A3               597             INC     DPTR
000151 74FF             598             MOV     A,#0FFH
000153 F5F0             599             MOV     B,A
000155 12000000   E     600             LCALL   ?C?IILDX
000159 A9F0             601             MOV     R1,B
00015B FA               602             MOV     R2,A
00015C 7448             603             MOV     A,#048H
00015E 12000000   E     604             LCALL   ?C?CSTPTR
                        605     ;       *--stk                   = 'L';                 /* DPL */
                        606                             ; SOURCE LINE # 121
000162 850083     E     607             MOV     DPH,?C_XBP
000165 850082     E     608             MOV     DPL,?C_XBP+01H
000168 759300     E     609             MOV     DPX,#?C?XDATASEG
00016B E0               610             MOVX    A,@DPTR
00016C FB               611             MOV     R3,A
00016D A3               612             INC     DPTR
00016E 74FF             613             MOV     A,#0FFH
000170 F5F0             614             MOV     B,A
000172 12000000   E     615             LCALL   ?C?IILDX
000176 A9F0             616             MOV     R1,B
000178 FA               617             MOV     R2,A
000179 744C             618             MOV     A,#04CH
00017B 12000000   E     619             LCALL   ?C?CSTPTR
                        620     ; //    *--stk                   = 'X';                 /* DPX1 for second DPTR */
                        621     ; //    *--stk                   = 'H';                 /* DPH1 for second DPTR */
                        622     ; //    *--stk                   = 'L';                 /* DPL1 for second DPTR */
                        623     ; //    *--stk                   = DPS;                 /* DPS for second DPTR */
                        624     ;       *--stk                   = PSW;                                 /* PSW */
                        625                             ; SOURCE LINE # 126
00017F 850083     E     626             MOV     DPH,?C_XBP
000182 850082     E     627             MOV     DPL,?C_XBP+01H
000185 759300     E     628             MOV     DPX,#?C?XDATASEG
000188 E0               629             MOVX    A,@DPTR
000189 FB               630             MOV     R3,A
00018A A3               631             INC     DPTR
00018B 74FF             632             MOV     A,#0FFH
00018D F5F0             633             MOV     B,A
00018F 12000000   E     634             LCALL   ?C?IILDX
000193 A9F0             635             MOV     R1,B
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    11

000195 FA               636             MOV     R2,A
000196 E5D0             637             MOV     A,PSW
000198 12000000   E     638             LCALL   ?C?CSTPTR
                        639     ;       *--stk                   = 0;                   /* R0  */
                        640                             ; SOURCE LINE # 127
00019C 850083     E     641             MOV     DPH,?C_XBP
00019F 850082     E     642             MOV     DPL,?C_XBP+01H
0001A2 759300     E     643             MOV     DPX,#?C?XDATASEG
0001A5 E0               644             MOVX    A,@DPTR
0001A6 FB               645             MOV     R3,A
0001A7 A3               646             INC     DPTR
0001A8 74FF             647             MOV     A,#0FFH
0001AA F5F0             648             MOV     B,A
0001AC 12000000   E     649             LCALL   ?C?IILDX
0001B0 A9F0             650             MOV     R1,B
0001B2 FA               651             MOV     R2,A
0001B3 E4               652             CLR     A
0001B4 12000000   E     653             LCALL   ?C?CSTPTR
                        654     ; /*
                        655     ;       *--stk                   = 1;                   // should be R1
                        656     ;       *--stk                   = 2;                   // should be R2
                        657     ;       *--stk                   = 3;                   // should be R3
                        658     ; */
                        659     ;       stk                             -= sizeof(void *);      /* Keil C uses R1,R2,R3 
                               to pass the */
                        660                             ; SOURCE LINE # 133
0001B8 850083     E     661             MOV     DPH,?C_XBP
0001BB 850082     E     662             MOV     DPL,?C_XBP+01H
0001BE 759300     E     663             MOV     DPX,#?C?XDATASEG
0001C1 A3               664             INC     DPTR
0001C2 74FF             665             MOV     A,#0FFH
0001C4 75F0FD           666             MOV     B,#0FDH
0001C7 12000000   E     667             LCALL   ?C?IILDX
                        668     ;       *(void**)stk     = pvParameters;                  /* arguments of functions.    
                                     */
                        669                             ; SOURCE LINE # 134
0001CB 90000009         670             MOV     DPTR,#09H
0001CF 12000000   E     671             LCALL   ?C?XBPOFF
0001D3 E0               672             MOVX    A,@DPTR
0001D4 FB               673             MOV     R3,A
0001D5 A3               674             INC     DPTR
0001D6 E0               675             MOVX    A,@DPTR
0001D7 FA               676             MOV     R2,A
0001D8 A3               677             INC     DPTR
0001D9 E0               678             MOVX    A,@DPTR
0001DA F9               679             MOV     R1,A
0001DB C003             680             PUSH    AR3
0001DD C002             681             PUSH    AR2
0001DF C001             682             PUSH    AR1
0001E1 850083     E     683             MOV     DPH,?C_XBP
0001E4 850082     E     684             MOV     DPL,?C_XBP+01H
0001E7 759300     E     685             MOV     DPX,#?C?XDATASEG
0001EA E0               686             MOVX    A,@DPTR
0001EB FB               687             MOV     R3,A
0001EC A3               688             INC     DPTR
0001ED E0               689             MOVX    A,@DPTR
0001EE FA               690             MOV     R2,A
0001EF A3               691             INC     DPTR
0001F0 E0               692             MOVX    A,@DPTR
0001F1 F9               693             MOV     R1,A
0001F2 12000000   E     694             LCALL   ?C?PSTPTR
                        695     ; 
                        696     ;       *--stk                   = 4;                   /* R4  */
                        697                             ; SOURCE LINE # 136
0001F6 850083     E     698             MOV     DPH,?C_XBP
0001F9 850082     E     699             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    12

0001FC 759300     E     700             MOV     DPX,#?C?XDATASEG
0001FF E0               701             MOVX    A,@DPTR
000200 FB               702             MOV     R3,A
000201 A3               703             INC     DPTR
000202 74FF             704             MOV     A,#0FFH
000204 F5F0             705             MOV     B,A
000206 12000000   E     706             LCALL   ?C?IILDX
00020A A9F0             707             MOV     R1,B
00020C FA               708             MOV     R2,A
00020D 7404             709             MOV     A,#04H
00020F 12000000   E     710             LCALL   ?C?CSTPTR
                        711     ;       *--stk                   = 5;                   /* R5  */
                        712                             ; SOURCE LINE # 137
000213 850083     E     713             MOV     DPH,?C_XBP
000216 850082     E     714             MOV     DPL,?C_XBP+01H
000219 759300     E     715             MOV     DPX,#?C?XDATASEG
00021C E0               716             MOVX    A,@DPTR
00021D FB               717             MOV     R3,A
00021E A3               718             INC     DPTR
00021F 74FF             719             MOV     A,#0FFH
000221 F5F0             720             MOV     B,A
000223 12000000   E     721             LCALL   ?C?IILDX
000227 A9F0             722             MOV     R1,B
000229 FA               723             MOV     R2,A
00022A 7405             724             MOV     A,#05H
00022C 12000000   E     725             LCALL   ?C?CSTPTR
                        726     ;       *--stk                   = 6;                   /* R6  */
                        727                             ; SOURCE LINE # 138
000230 850083     E     728             MOV     DPH,?C_XBP
000233 850082     E     729             MOV     DPL,?C_XBP+01H
000236 759300     E     730             MOV     DPX,#?C?XDATASEG
000239 E0               731             MOVX    A,@DPTR
00023A FB               732             MOV     R3,A
00023B A3               733             INC     DPTR
00023C 74FF             734             MOV     A,#0FFH
00023E F5F0             735             MOV     B,A
000240 12000000   E     736             LCALL   ?C?IILDX
000244 A9F0             737             MOV     R1,B
000246 FA               738             MOV     R2,A
000247 7406             739             MOV     A,#06H
000249 12000000   E     740             LCALL   ?C?CSTPTR
                        741     ;       *--stk                   = 7;                   /* R7  */
                        742                             ; SOURCE LINE # 139
00024D 850083     E     743             MOV     DPH,?C_XBP
000250 850082     E     744             MOV     DPL,?C_XBP+01H
000253 759300     E     745             MOV     DPX,#?C?XDATASEG
000256 E0               746             MOVX    A,@DPTR
000257 FB               747             MOV     R3,A
000258 A3               748             INC     DPTR
000259 74FF             749             MOV     A,#0FFH
00025B F5F0             750             MOV     B,A
00025D 12000000   E     751             LCALL   ?C?IILDX
000261 A9F0             752             MOV     R1,B
000263 FA               753             MOV     R2,A
000264 7407             754             MOV     A,#07H
000266 12000000   E     755             LCALL   ?C?CSTPTR
                        756     ; /* Following is the registers pushed into hardware stack manually to support the dalla
                               s 390 */
                        757     ;     *--stk           = 0x80;                /* IE, EA is enabled  */
                        758                             ; SOURCE LINE # 141
00026A 850083     E     759             MOV     DPH,?C_XBP
00026D 850082     E     760             MOV     DPL,?C_XBP+01H
000270 759300     E     761             MOV     DPX,#?C?XDATASEG
000273 E0               762             MOVX    A,@DPTR
000274 FB               763             MOV     R3,A
000275 A3               764             INC     DPTR
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    13

000276 74FF             765             MOV     A,#0FFH
000278 F5F0             766             MOV     B,A
00027A 12000000   E     767             LCALL   ?C?IILDX
00027E A9F0             768             MOV     R1,B
000280 FA               769             MOV     R2,A
000281 7480             770             MOV     A,#080H
000283 12000000   E     771             LCALL   ?C?CSTPTR
                        772     ; 
                        773     ; /*
                        774     ;     Next is calculating the hardware stack pointer.
                        775     ; */
                        776     ;     *--stk                     = (INT8U) portSTACK_START-1      /* Initial value when 
                               main was called    */
                        777                             ; SOURCE LINE # 146
000287 7400       E     778             MOV     A,#LOW (STACK_START)
000289 2408             779             ADD     A,#08H
00028B 2405             780             ADD     A,#05H
00028D 04               781             INC     A
00028E 2402             782             ADD     A,#02H
000290 04               783             INC     A
000291 FF               784             MOV     R7,A
000292 850083     E     785             MOV     DPH,?C_XBP
000295 850082     E     786             MOV     DPL,?C_XBP+01H
000298 759300     E     787             MOV     DPX,#?C?XDATASEG
00029B E0               788             MOVX    A,@DPTR
00029C FB               789             MOV     R3,A
00029D A3               790             INC     DPTR
00029E 74FF             791             MOV     A,#0FFH
0002A0 F5F0             792             MOV     B,A
0002A2 12000000   E     793             LCALL   ?C?IILDX
0002A6 A9F0             794             MOV     R1,B
0002A8 FA               795             MOV     R2,A
0002A9 EF               796             MOV     A,R7
0002AA 12000000   E     797             LCALL   ?C?CSTPTR
                        798     ;                          +1                   /* IE */
                        799     ;                          +8                   /* R0-R7, eight registers was saved     
                                */
                        800     ;                        +5                   /* ACC, B, DPH, DPL, PSW, five registers *
                               /
                        801     ;                        +1                   /* Dallas 390 extra registers DPX1 */
                        802     ; //                       +4                   /* Dallas 390 extra registers for second
                                DPTR - DPL1 DPH1 DPX1 DPS */
                        803     ;                        +sizeof(INT16U)      /* The PC value to be loaded             *
                               /
                        804     ;                        +sizeof(INT8U)       /* The third byte of PC value to be loaded
                                for dallas 390  */
                        805     ;                                          ;
                        806     ;     return ((void *)stk);
                        807                             ; SOURCE LINE # 155
0002AE 850083     E     808             MOV     DPH,?C_XBP
0002B1 850082     E     809             MOV     DPL,?C_XBP+01H
0002B4 759300     E     810             MOV     DPX,#?C?XDATASEG
0002B7 E0               811             MOVX    A,@DPTR
0002B8 FB               812             MOV     R3,A
0002B9 A3               813             INC     DPTR
0002BA E0               814             MOVX    A,@DPTR
0002BB FA               815             MOV     R2,A
0002BC A3               816             INC     DPTR
0002BD E0               817             MOVX    A,@DPTR
0002BE F9               818             MOV     R1,A
                        819     ; 
                        820     ; }
                        821                             ; SOURCE LINE # 157
0002BF                  822     ?C0001:
0002BF 9000000C         823             MOV     DPTR,#0CH
0002C3 02000000   E     824             LJMP    ?C?ADDXBP
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    14

                        825     ; END OF _?pxPortInitialiseStack
                        826     
                        827     ; 
                        828     ; /* 
                        829     ;  * See header file for description. 
                        830     ;  */
                        831     ; portSHORT sPortStartScheduler( portSHORT sUsePreemption ) reentrant
                        832     
------                  833             RSEG  ?PR?_?sPortStartScheduler?PORT
000000                  834     _?sPortStartScheduler:
                        835             USING   0
                        836                             ; SOURCE LINE # 162
000000 9000FFFE         837             MOV     DPTR,#0FFFEH
000004 12000000   E     838             LCALL   ?C?ADDXBP
000008 EE               839             MOV     A,R6
000009 F0               840             MOVX    @DPTR,A
00000A A3               841             INC     DPTR
00000B EF               842             MOV     A,R7
00000C F0               843             MOVX    @DPTR,A
                        844     ; {
                        845     ;       /* Stop compiler warnings.  This port uses a constant defined in
                        846     ;       portmacro.h to specify whether or not preemption is used. */
                        847     ;       sUsePreemption = sUsePreemption;
                        848                             ; SOURCE LINE # 166
00000D 850083     E     849             MOV     DPH,?C_XBP
000010 850082     E     850             MOV     DPL,?C_XBP+01H
000013 759300     E     851             MOV     DPX,#?C?XDATASEG
000016 E0               852             MOVX    A,@DPTR
000017 FF               853             MOV     R7,A
000018 A3               854             INC     DPTR
000019 E0               855             MOVX    A,@DPTR
00001A 850083     E     856             MOV     DPH,?C_XBP
00001D 850082     E     857             MOV     DPL,?C_XBP+01H
000020 759300     E     858             MOV     DPX,#?C?XDATASEG
000023 CF               859             XCH     A,R7
000024 F0               860             MOVX    @DPTR,A
000025 A3               861             INC     DPTR
000026 EF               862             MOV     A,R7
000027 F0               863             MOVX    @DPTR,A
                        864     ; 
                        865     ;       /* Setup timer 2 to generate the RTOS tick. */
                        866     ;       prvSetupTimerInterrupt();       
                        867                             ; SOURCE LINE # 169
000028 12000000   F     868             LCALL   prvSetupTimerInterrupt
                        869     ; 
                        870     ;     prvSetCurrentTCB_XBP();
                        871                             ; SOURCE LINE # 171
00002C 12000000   E     872             LCALL   _?prvSetCurrentTCB_XBP
                        873     ;       LoadCtx();
                        874                             ; SOURCE LINE # 172
000030 12000000   E     875             LCALL   _?LoadCtx
                        876     ;                                                                               /* Shoul
                               d never get here! */
                        877     ;       return pdTRUE;
                        878                             ; SOURCE LINE # 174
000034 7E00             879             MOV     R6,#00H
000036 7F01             880             MOV     R7,#01H
                        881     ; }
                        882                             ; SOURCE LINE # 175
000038                  883     ?C0002:
000038 90000002         884             MOV     DPTR,#02H
00003C 02000000   E     885             LJMP    ?C?ADDXBP
                        886     ; END OF _?sPortStartScheduler
                        887     
                        888     ; 
                        889     ; /*-----------------------------------------------------------*/
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    15

                        890     ; 
                        891     ; void vPortEndScheduler(void) reentrant
                        892     
------                  893             RSEG  ?PR?_?vPortEndScheduler?PORT
000000                  894     _?vPortEndScheduler:
                        895             USING   0
                        896                             ; SOURCE LINE # 179
                        897     ; {
                        898     ; 
                        899     ;       /* Not implemented for this port. */
                        900     ; }
                        901                             ; SOURCE LINE # 183
000000 22               902             RET     
                        903     ; END OF _?vPortEndScheduler
                        904     
                        905     ; /*-----------------------------------------------------------*/
                        906     ; 
                        907     ; 
                        908     ; /*************************************************************************************
                               *********************
                        909     ; * C_OSCtxSw is the c part of OSCtxSw.
                        910     ; * When control passes to this function, the processor registers have been saved in ext
                               ernal stack
                        911     ; **************************************************************************************
                               *********************/
                        912     ; void vPortContextSwitch(void) reentrant
                        913     
------                  914             RSEG  ?PR?_?vPortContextSwitch?PORT
000000                  915     _?vPortContextSwitch:
                        916             USING   0
                        917                             ; SOURCE LINE # 191
                        918     ; {
                        919     ; 
                        920     ; /*    Save processor registers; DONE in the OSCtxSw part in OS_CPU_ASM.ASM            
                                                     */
                        921     ; 
                        922     ; /*    Save the current task's stack pointer into the current task's OS_TCB:  
                        923     ;               prvGetCurrentTCB_XBP();
                        924     ;       Call vTaskSwitchContext();                                    
                        925     ;       Get the stack pointer of the task to resume:                           
                        926     ;               prvSetCurrentTCB_XBP;
                        927     ;       Restore all processor registers from the new task's stack;             
                        928     ;       Execute a return from interrupt instruction;                           */
                        929     ;     prvGetCurrentTCB_XBP();
                        930                             ; SOURCE LINE # 203
000000 12000000   E     931             LCALL   _?prvGetCurrentTCB_XBP
                        932     ;     
                        933     ;       vTaskSwitchContext();
                        934                             ; SOURCE LINE # 205
000004 12000000   E     935             LCALL   _?vTaskSwitchContext
                        936     ; 
                        937     ;     prvSetCurrentTCB_XBP();
                        938                             ; SOURCE LINE # 207
000008 12000000   E     939             LCALL   _?prvSetCurrentTCB_XBP
                        940     ;     LoadCtx();
                        941                             ; SOURCE LINE # 208
00000C 02000000   E     942             LJMP    _?LoadCtx
                        943     ; END OF _?vPortContextSwitch
                        944     
                        945     ; 
                        946     ; }
                        947     ; 
                        948     ; 
                        949     ; INT8U data SaveSP;
                        950     ; 
                        951     ; void OSIntCtxSw(void) reentrant
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    16

                        952     
------                  953             RSEG  ?PR?_?OSIntCtxSw?PORT
000000                  954     _?OSIntCtxSw:
                        955             USING   0
                        956                             ; SOURCE LINE # 215
                        957     ; {
                        958     ; 
                        959     ;       EA=0;
                        960                             ; SOURCE LINE # 218
000000 C2AF             961             CLR     EA
                        962     ;     SP=SaveSP;
                        963                             ; SOURCE LINE # 219
000002 850081     F     964             MOV     SP,SaveSP
                        965     ; 
                        966     ;     prvSetCurrentTCB_XBP();
                        967                             ; SOURCE LINE # 221
000005 12000000   E     968             LCALL   _?prvSetCurrentTCB_XBP
                        969     ; 
                        970     ; #pragma ASM
                        971     ;       EXTRN   CODE(_?KCOSCtxSw)
                        972               EXTRN   code(_?KCOSCtxSw)
                        973     ;       MOV             A, #BYTE0( _?KCOSCtxSw)
000009 7400       E     974               MOV           A, #BYTE0( _?KCOSCtxSw)
                        975     ;       PUSH    ACC
00000B C0E0             976               PUSH  ACC
                        977     ;       MOV             A, #BYTE1(_?KCOSCtxSw)
00000D 7400       E     978               MOV           A, #BYTE1(_?KCOSCtxSw)
                        979     ;       PUSH    ACC
00000F C0E0             980               PUSH  ACC
                        981     ;       MOV             A, #BYTE2(_?KCOSCtxSw)
000011 7400       E     982               MOV           A, #BYTE2(_?KCOSCtxSw)
                        983     ;       PUSH    ACC
000013 C0E0             984               PUSH  ACC
                        985     ;       RETI
000015 32               986               RETI
                        987     ; #pragma ENDASM
                        988     ; 
                        989     ; }
                        990                             ; SOURCE LINE # 234
000016 22               991             RET     
                        992     ; END OF _?OSIntCtxSw
                        993     
                        994     ; 
                        995     ; 
                        996     ; void vIntPortContextSwitch(void) reentrant
                        997     
------                  998             RSEG  ?PR?_?vIntPortContextSwitch?PORT
000000                  999     _?vIntPortContextSwitch:
                       1000             USING   0
                       1001                             ; SOURCE LINE # 237
                       1002     ; {
                       1003     ; 
                       1004     ; /*    Save processor registers; DONE in the OSCtxSw part in OS_CPU_ASM.ASM            
                                                     */
                       1005     ; 
                       1006     ; /*    Save the current task's stack pointer into the current task's OS_TCB:  
                       1007     ;               prvGetCurrentTCB_XBP();
                       1008     ;       Call vTaskSwitchContext();                                    
                       1009     ;       Get the stack pointer of the task to resume:                           
                       1010     ;               prvSetCurrentTCB_XBP;
                       1011     ;       Restore all processor registers from the new task's stack;             
                       1012     ;       Execute a return from interrupt instruction;                           */
                       1013     ;     prvGetCurrentTCB_XBP();
                       1014                             ; SOURCE LINE # 249
000000 12000000   E    1015             LCALL   _?prvGetCurrentTCB_XBP
                       1016     ; 
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    17

                       1017     ;       if ( TICK_INT == 1 )
                       1018                             ; SOURCE LINE # 251
000004 E500       E    1019             MOV     A,TICK_INT
000006 B40107          1020             CJNE    A,#01H,?C0006
                       1021     ;       {
                       1022                             ; SOURCE LINE # 252
                       1023     ;               vTaskIncrementTick();
                       1024                             ; SOURCE LINE # 253
000009 12000000   E    1025             LCALL   _?vTaskIncrementTick
                       1026     ;               TICK_INT = 0;
                       1027                             ; SOURCE LINE # 254
00000D E4              1028             CLR     A
00000E F500       E    1029             MOV     TICK_INT,A
                       1030     ;       }
                       1031                             ; SOURCE LINE # 255
000010                 1032     ?C0006:
                       1033     ;       vTaskSwitchContext();
                       1034                             ; SOURCE LINE # 256
000010 12000000   E    1035             LCALL   _?vTaskSwitchContext
                       1036     ;               
                       1037     ;       portCLEAR_INTERRUPT_FLAG();
                       1038                             ; SOURCE LINE # 258
000014 C2EB            1039             CLR     EINT5
000016 5391F7          1040             ANL     EIF,#0F7H
000019 D2EB            1041             SETB    EINT5
                       1042     ; 
                       1043     ;     prvSetCurrentTCB_XBP();
                       1044                             ; SOURCE LINE # 260
00001B 12000000   E    1045             LCALL   _?prvSetCurrentTCB_XBP
                       1046     ;     LoadCtx();
                       1047                             ; SOURCE LINE # 261
00001F 12000000   E    1048             LCALL   _?LoadCtx
                       1049     ;       return;
                       1050     ; 
                       1051     ; }
                       1052                             ; SOURCE LINE # 264
000023                 1053     ?C0007:
000023 22              1054             RET     
                       1055     ; END OF _?vIntPortContextSwitch
                       1056     
006073                 1057     CSEG    AT      06073H
006073 02000000   F    1058             LJMP    vTimer2ISR
                       1059     
                       1060     ; 
                       1061     ; extern U8_T ChangeFlash;
                       1062     ; /*-----------------------------------------------------------*/
                       1063     ; 
                       1064     ; #if portUSE_PREEMPTION == 1
                       1065     ; 
                       1066     ; /*-----------------------------------------------------------*/
                       1067     ; void PWMoutput(void);  // added by chelsea
                       1068     ; 
                       1069     ; void vTimer2ISR( void ) interrupt 10
                       1070     
------                 1071             RSEG  ?PR?vTimer2ISR?PORT
                       1072             USING   0
000000                 1073     vTimer2ISR:
000000 C0E0            1074             PUSH    ACC
000002 C0F0            1075             PUSH    B
000004 C093            1076             PUSH    DPX
000006 C083            1077             PUSH    DPH
000008 C082            1078             PUSH    DPL
00000A C0D0            1079             PUSH    PSW
00000C 75D000          1080             MOV     PSW,#00H
00000F C000            1081             PUSH    AR0
000011 C001            1082             PUSH    AR1
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    18

000013 C002            1083             PUSH    AR2
000015 C003            1084             PUSH    AR3
000017 C004            1085             PUSH    AR4
000019 C005            1086             PUSH    AR5
00001B C006            1087             PUSH    AR6
00001D C007            1088             PUSH    AR7
                       1089             USING   0
                       1090                             ; SOURCE LINE # 274
                       1091     ; {
                       1092     ;       unsigned portCHAR       isr;
                       1093     ; #pragma ASM
                       1094     ;               PUSH IE
00001F C0A8            1095               PUSH IE
                       1096     ; #pragma ENDASM
                       1097     ;               isr = EA;
                       1098                             ; SOURCE LINE # 280
000021 A2AF            1099             MOV     C,EA
000023 E4              1100             CLR     A
000024 33              1101             RLC     A
000025 90000000   F    1102             MOV     DPTR,#isr?640
000029 F0              1103             MOVX    @DPTR,A
                       1104     ;               EA = 0;
                       1105                             ; SOURCE LINE # 281
00002A C2AF            1106             CLR     EA
                       1107     ;               TICK_INT = 1;
                       1108                             ; SOURCE LINE # 282
00002C 750001     E    1109             MOV     TICK_INT,#01H
                       1110     ;               SaveSP = SP;
                       1111                             ; SOURCE LINE # 283
00002F 858100     F    1112             MOV     SaveSP,SP
                       1113     ;         prvGetCurrentTCB_XBP();
                       1114                             ; SOURCE LINE # 284
000032 12000000   E    1115             LCALL   _?prvGetCurrentTCB_XBP
                       1116     ;                       
                       1117     ;               
                       1118     ;                       PWMoutput();
                       1119                             ; SOURCE LINE # 287
000036 12000000   E    1120             LCALL   PWMoutput
                       1121     ; 
                       1122     ;               EA = isr;
                       1123                             ; SOURCE LINE # 289
00003A 90000000   F    1124             MOV     DPTR,#isr?640
00003E E0              1125             MOVX    A,@DPTR
00003F 24FF            1126             ADD     A,#0FFH
000041 92AF            1127             MOV     EA,C
                       1128     ;               OSIntCtxSw();   
                       1129                             ; SOURCE LINE # 290
000043 12000000   F    1130             LCALL   _?OSIntCtxSw
                       1131     ;               
                       1132     ; 
                       1133     ; }
                       1134                             ; SOURCE LINE # 293
000047 D007            1135             POP     AR7
000049 D006            1136             POP     AR6
00004B D005            1137             POP     AR5
00004D D004            1138             POP     AR4
00004F D003            1139             POP     AR3
000051 D002            1140             POP     AR2
000053 D001            1141             POP     AR1
000055 D000            1142             POP     AR0
000057 D0D0            1143             POP     PSW
000059 D082            1144             POP     DPL
00005B D083            1145             POP     DPH
00005D D093            1146             POP     DPX
00005F D0F0            1147             POP     B
000061 D0E0            1148             POP     ACC
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    19

000063 32              1149             RETI    
                       1150     ; END OF vTimer2ISR
                       1151     
                       1152     ; 
                       1153     ; #endif
                       1154     ; 
                       1155     ; /*-----------------------------------------------------------*/
                       1156     ; static void prvSetupTimerInterrupt( void )
                       1157     
------                 1158             RSEG  ?PR?prvSetupTimerInterrupt?PORT
000000                 1159     prvSetupTimerInterrupt:
                       1160             USING   0
                       1161                             ; SOURCE LINE # 298
                       1162     ; {
                       1163                             ; SOURCE LINE # 299
                       1164     ;       /* using MS_TIMER */
                       1165     ;       U8_T XDATA      temp[2];
                       1166     ; 
                       1167     ;       /* set software timer */
                       1168     ;       temp[1] = (U8_T)SWTIMER_INTERVAL;
                       1169                             ; SOURCE LINE # 304
000000 90000000   F    1170             MOV     DPTR,#temp?741+01H
000004 7402            1171             MOV     A,#02H
000006 F0              1172             MOVX    @DPTR,A
                       1173     ;       temp[0] = (U8_T)(SWTIMER_INTERVAL >> 8) + SWTIMER_START + SWTIMER_INT_ENABLE;
                       1174                             ; SOURCE LINE # 305
000007 90000000   F    1175             MOV     DPTR,#temp?741
00000B 7490            1176             MOV     A,#090H
00000D F0              1177             MOVX    @DPTR,A
                       1178     ;       DMA_WriteReg(SWTIMER_REG, temp, 2);
                       1179                             ; SOURCE LINE # 306
00000E 7C00       F    1180             MOV     R4,#HIGH (temp?741)
000010 7D00       F    1181             MOV     R5,#LOW (temp?741)
000012 7B02            1182             MOV     R3,#02H
000014 7F0C            1183             MOV     R7,#0CH
000016 12000000   E    1184             LCALL   _DMA_WriteReg
                       1185     ; 
                       1186     ;       EXTINT5(1);     /* Enable INT5 interrupt for software timer. */
                       1187                             ; SOURCE LINE # 308
00001A D2EB            1188             SETB    EINT5
                       1189     ; 
                       1190     ; }
                       1191                             ; SOURCE LINE # 310
00001C 22              1192             RET     
                       1193     ; END OF prvSetupTimerInterrupt
                       1194     
                       1195             END
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    20

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    EC ADDR  02BFH     R   SEG=?PR?_?PXPORTINITIALISESTACK?PORT
?C0002. . . . . . . . . . . . . . . . .    EC ADDR  0038H     R   SEG=?PR?_?SPORTSTARTSCHEDULER?PORT
?C0006. . . . . . . . . . . . . . . . .    EC ADDR  0010H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
?C0007. . . . . . . . . . . . . . . . .    EC ADDR  0023H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
?C?ADDXBP . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IILDX. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ULSHR. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XBPOFF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XDATASEG . . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C_XBP. . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
?DT?PORT. . . . . . . . . . . . . . . .    D  SEG   000001H       REL=UNIT, ALN=BYTE
?PR?_?OSINTCTXSW?PORT . . . . . . . . .    EC SEG   000017H       REL=INSEG, ALN=BYTE
?PR?_?PXPORTINITIALISESTACK?PORT. . . .    EC SEG   0002C7H       REL=INSEG, ALN=BYTE
?PR?_?SPORTSTARTSCHEDULER?PORT. . . . .    EC SEG   000040H       REL=INSEG, ALN=BYTE
?PR?_?VINTPORTCONTEXTSWITCH?PORT. . . .    EC SEG   000024H       REL=INSEG, ALN=BYTE
?PR?_?VPORTCONTEXTSWITCH?PORT . . . . .    EC SEG   000010H       REL=INSEG, ALN=BYTE
?PR?_?VPORTENDSCHEDULER?PORT. . . . . .    EC SEG   000001H       REL=INSEG, ALN=BYTE
?PR?PRVSETUPTIMERINTERRUPT?PORT . . . .    EC SEG   00001DH       REL=INSEG, ALN=BYTE
?PR?VTIMER2ISR?PORT . . . . . . . . . .    EC SEG   000064H       REL=INSEG, ALN=BYTE
?PRVSETUPTIMERINTERRUPT?BYTE. . . . . .    X  ADDR  0000H     R   SEG=?XD?PRVSETUPTIMERINTERRUPT?PORT
?VTIMER2ISR?BYTE. . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?VTIMER2ISR?PORT
?XD?PRVSETUPTIMERINTERRUPT?PORT . . . .    X  SEG   000002H       REL=UNIT, ALN=BYTE
?XD?VTIMER2ISR?PORT . . . . . . . . . .    X  SEG   000001H       REL=UNIT, ALN=BYTE
_?KCOSCTXSW . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?LOADCTX . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?OSINTCTXSW. . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?OSINTCTXSW?PORT
_?PRVGETCURRENTTCB_XBP. . . . . . . . .    C  ADDR  -------       EXT
_?PRVSETCURRENTTCB_XBP. . . . . . . . .    C  ADDR  -------       EXT
_?PXPORTINITIALISESTACK . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PXPORTINITIALISESTACK?PORT
_?SPORTSTARTSCHEDULER . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?SPORTSTARTSCHEDULER?PORT
_?VINTPORTCONTEXTSWITCH . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
_?VPORTCONTEXTSWITCH. . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTCONTEXTSWITCH?PORT
_?VPORTENDSCHEDULER . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTENDSCHEDULER?PORT
_?VTASKINCREMENTTICK. . . . . . . . . .    C  ADDR  -------       EXT
_?VTASKSWITCHCONTEXT. . . . . . . . . .    C  ADDR  -------       EXT
_DMA_WRITEREG . . . . . . . . . . . . .    C  ADDR  -------       EXT
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . . . . . . .    D  ADDR  009DH     A   
AR0 . . . . . . . . . . . . . . . . . .    D  ADDR  0000H     A   
AR1 . . . . . . . . . . . . . . . . . .    D  ADDR  0001H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR4 . . . . . . . . . . . . . . . . . .    D  ADDR  0004H     A   
AR5 . . . . . . . . . . . . . . . . . .    D  ADDR  0005H     A   
AR6 . . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7 . . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
ARCON . . . . . . . . . . . . . . . . .    D  ADDR  00FFH     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
CANCIR. . . . . . . . . . . . . . . . .    D  ADDR  00DEH     A   
CANDR . . . . . . . . . . . . . . . . .    D  ADDR  00DFH     A   
CCAPH0. . . . . . . . . . . . . . . . .    D  ADDR  00B9H     A   
CCAPH1. . . . . . . . . . . . . . . . .    D  ADDR  00BAH     A   
CCAPH2. . . . . . . . . . . . . . . . .    D  ADDR  00BBH     A   
CCAPH3. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
CCAPH4. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
CCAPL0. . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    21

CCAPL1. . . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
CCAPL2. . . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
CCAPL3. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
CCAPL4. . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
CCAPM0. . . . . . . . . . . . . . . . .    D  ADDR  00D1H     A   
CCAPM1. . . . . . . . . . . . . . . . .    D  ADDR  00D2H     A   
CCAPM2. . . . . . . . . . . . . . . . .    D  ADDR  00D3H     A   
CCAPM3. . . . . . . . . . . . . . . . .    D  ADDR  00D4H     A   
CCAPM4. . . . . . . . . . . . . . . . .    D  ADDR  00D5H     A   
CCON. . . . . . . . . . . . . . . . . .    D  ADDR  00C3H     A   
CH. . . . . . . . . . . . . . . . . . .    D  ADDR  00C5H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CL. . . . . . . . . . . . . . . . . . .    D  ADDR  00C4H     A   
CMOD. . . . . . . . . . . . . . . . . .    D  ADDR  00C2H     A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CSREPR. . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DBAR. . . . . . . . . . . . . . . . . .    D  ADDR  009AH     A   
DCIR. . . . . . . . . . . . . . . . . .    D  ADDR  009BH     A   
DDR . . . . . . . . . . . . . . . . . .    D  ADDR  009CH     A   
DMAHR . . . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
DMALR . . . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
DMAMR . . . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DPX . . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX0. . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIF . . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
EINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
EPCR. . . . . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
EPDR. . . . . . . . . . . . . . . . . .    D  ADDR  00BFH     A   
ES0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.6   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.5   A   
EWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
I2CCIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
I2CDR . . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
INT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    22

ISR?640 . . . . . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?VTIMER2ISR?PORT
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
LCR . . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LDAHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
LDALR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
LDCSR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
LDHR. . . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
LDLR. . . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
LMSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSAIER. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSCR. . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LSR . . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
LSSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
MCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
MD0 . . . . . . . . . . . . . . . . . .    D  ADDR  00F9H     A   
MD1 . . . . . . . . . . . . . . . . . .    D  ADDR  00FAH     A   
MD2 . . . . . . . . . . . . . . . . . .    D  ADDR  00FBH     A   
MD3 . . . . . . . . . . . . . . . . . .    D  ADDR  00FCH     A   
MD4 . . . . . . . . . . . . . . . . . .    D  ADDR  00FDH     A   
MD5 . . . . . . . . . . . . . . . . . .    D  ADDR  00FEH     A   
MDR . . . . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
MXAX. . . . . . . . . . . . . . . . . .    D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
OWCIR . . . . . . . . . . . . . . . . .    D  ADDR  00D6H     A   
OWDR. . . . . . . . . . . . . . . . . .    D  ADDR  00D7H     A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . . . . . . .    D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    23

PINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
PINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PISSR1. . . . . . . . . . . . . . . . .    D  ADDR  009EH     A   
PISSR2. . . . . . . . . . . . . . . . .    D  ADDR  009FH     A   
PORT. . . . . . . . . . . . . . . . . .    -- ----  -------       
PRVSETUPTIMERINTERRUPT. . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?PRVSETUPTIMERINTERRUPT?PORT
PS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.6   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.5   A   
PWMOUTPUT . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
RB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.2   A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
RD. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
REN0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.4   A   
RI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.0   A   
RLDH. . . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RLDL. . . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.0   A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
SAVESP. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?PORT
SBUF0 . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . . . . . . .    D  ADDR  00C1H     A   
SCON0 . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . . . . . . .    D  ADDR  00C0H     A   
SDSTSR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
SM00. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM02. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SM10. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.7   A   
SM11. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.6   A   
SM12. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPICIR. . . . . . . . . . . . . . . . .    D  ADDR  00CEH     A   
SPIDR . . . . . . . . . . . . . . . . .    D  ADDR  00CFH     A   
STACK_START . . . . . . . . . . . . . .    I  ADDR  -------       EXT
STATUS. . . . . . . . . . . . . . . . .    D  ADDR  00E9H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T2IF. . . . . . . . . . . . . . . . . .    D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . . . . . . .    D  ADDR  00EBH     A   
TB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.3   A   
TCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00AEH     A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TDR . . . . . . . . . . . . . . . . . .    D  ADDR  00AFH     A   
TEMP?741. . . . . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?PRVSETUPTIMERINTERRUPT?PORT
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/08/13 16:48:49 PAGE    24

TI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.1   A   
TICK_INT. . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
UR2_DLH . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_DLL . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_FCR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_IER . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_IIR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_LCR . . . . . . . . . . . . . . . .    D  ADDR  00E4H     A   
UR2_LSR . . . . . . . . . . . . . . . .    D  ADDR  00E6H     A   
UR2_MCR . . . . . . . . . . . . . . . .    D  ADDR  00E5H     A   
UR2_MSR . . . . . . . . . . . . . . . .    D  ADDR  00E7H     A   
UR2_RBR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_THR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
VTIMER2ISR. . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?VTIMER2ISR?PORT
WDCON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   
WR. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
WTRF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.2   A   
WTST. . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
XMRHR . . . . . . . . . . . . . . . . .    D  ADDR  00A7H     A   
XMRLR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
XMWHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
XMWLR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
