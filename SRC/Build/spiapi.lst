C51 COMPILER V9.00   SPIAPI                                                                02/28/2013 15:46:43 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SPIAPI
OBJECT MODULE PLACED IN .\Build\spiapi.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SPI\spiapi.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\Fr
                    -eeRTOSSource\include\;..\SRC\FreeRTOSSource\portable\Keil\AX11000;..\SRC\CPU\;..\SRC\MS_TIMER\;..\SRC\SW_DMA\;..\SRC\UAR
                    -T\;..\SRC\ETHERNET\;..\SRC\APPLICATION\;..\SRC\ETHERNET\;..\SRC\tcpip\;..\SRC\ADAPTER;..\SRC\main;..\SRC\SD_Card\;..\SRC
                    -\GSM\;..\SRC\Web\;..\SRC\SPI\;..\SRC\I2C\;..\SRC\PCA\;..\SRC\Modbus\;..\SRC\buffer\;..\SRC\hsur\;..\SRC\management\;..\S
                    -RC\dhcp\;..\SRC\pppoe\;..\SRC\MINI_262\;..\SRC\flash;..\SRC\SNTP) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\Build\sp
                    -iapi.lst) OBJECT(.\Build\spiapi.obj)

line level    source

   1          /*
   2           *********************************************************************************
   3           *     Copyright (c) 2005       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           *********************************************************************************
  10           */
  11          /*================================================================================
  12           * Module Name : spiapi.c
  13           * Purpose     : 
  14           * Author      : Robin Lee
  15           * Date        : 2006-01-10
  16           * Notes       :
  17           * $Log$
  18           *================================================================================
  19           */
  20          
  21          /* INCLUDE FILE DECLARATIONS */
  22          #include        "reg80390.h"
  23          #include        "types.h"
  24          #include        "spi.h"
  25          #include        "spiapi.h"
  26          #include        "stdio.h"
  27          
  28          /* STATIC VARIABLE DECLARATIONS */
  29          
  30          
  31          /* LOCAL SUBPROGRAM DECLARATIONS */
  32          
  33          
  34          /* LOCAL SUBPROGRAM BODIES */
  35          
  36          
  37          /* EXPORTED SUBPROGRAM BODIES */
  38          
  39          /*
  40           *--------------------------------------------------------------------------------
  41           * BOOL SPI_WriteEnable(void)
  42           * Purpose : Enable a write process before sending a packet to write.
  43           * Params  : none
  44           * Returns : TRUE - successful
  45           * Note    : Write Enable must be initial when executing all write function.
  46           *--------------------------------------------------------------------------------
  47           */
  48          BOOL SPI_WriteEnable(void)
  49          {
  50   1              U8_T    xmitByte = 0;
C51 COMPILER V9.00   SPIAPI                                                                02/28/2013 15:46:43 PAGE 2   

  51   1              
  52   1              xmitByte = SPI_WREN;
  53   1              SPI_FlagEnb(SPI_BUSY);
  54   1              SPI_MstXmit(&xmitByte, 8, SPI_NORMAL_LEN|SPI_GO_BSY);
  55   1      
  56   1              while (SPI_FlagChk(SPI_BUSY)) {}
  57   1      
  58   1              return TRUE;
  59   1      }
  60          
  61          /*
  62           *--------------------------------------------------------------------------------
  63           * BOOL SPI_WriteDisable(void)
  64           * Purpose : Disable a write process.
  65           * Params  : none
  66           * Returns : TRUE - successful
  67           * Note    : After WriteDisable executed, all writing function will be fail.
  68           *--------------------------------------------------------------------------------
  69           */
  70          BOOL SPI_WriteDisable(void)
  71          {
  72   1              U8_T    xmitByte = 0;
  73   1              
  74   1              xmitByte = SPI_WRDI;
  75   1              SPI_FlagEnb(SPI_BUSY);
  76   1              SPI_MstXmit(&xmitByte, 8, SPI_NORMAL_LEN|SPI_GO_BSY);
  77   1      
  78   1              while (SPI_FlagChk(SPI_BUSY)) {}
  79   1      
  80   1              return TRUE;
  81   1      }
  82          
  83          /*
  84           *--------------------------------------------------------------------------------
  85           * BOOL SPI_WriteStatus(U8_T status)
  86           * Purpose : Change a device status register.
  87           * Params  : status - changed value.
  88           * Returns : TRUE - successful.
  89           * Note    :
  90           *--------------------------------------------------------------------------------
  91           */
  92          BOOL SPI_WriteStatus(U8_T status)
  93          {
  94   1              U8_T    writeStatus[2];
  95   1              
  96   1              writeStatus[1] = SPI_WRSR;
  97   1              writeStatus[0] = status;
  98   1      
  99   1              if (!SPI_WriteEnable())
 100   1                      return FALSE;
 101   1              SPI_FlagEnb(SPI_BUSY);
 102   1              SPI_MstXmit(&writeStatus, 16, SPI_NORMAL_LEN|SPI_GO_BSY);
 103   1              while (SPI_FlagChk(SPI_BUSY)) {}
 104   1              
 105   1              return TRUE;
 106   1      }
 107          
 108          /*
 109           *--------------------------------------------------------------------------------
 110           * BOOL SPI_ReadStatus(U8_T *status)
 111           * Purpose : Read a device status register.
 112           * Params  : *status - a pointer of status value.
C51 COMPILER V9.00   SPIAPI                                                                02/28/2013 15:46:43 PAGE 3   

 113           * Returns : TRUE - successful
 114           * Note    : 
 115           *--------------------------------------------------------------------------------
 116           */
 117          BOOL SPI_ReadStatus(U8_T *status)
 118          {
 119   1              U8_T    readStatus[2];
 120   1              
 121   1              readStatus[1] = SPI_RDSR;
 122   1              readStatus[0] = 0;
 123   1              
 124   1              SPI_FlagEnb(SPI_BUSY);
 125   1              SPI_MstXmit(&readStatus, 16, SPI_NORMAL_LEN|SPI_GO_BSY);
 126   1              //printf("a\n");
 127   1              while (SPI_FlagChk(SPI_BUSY)) {}
 128   1              SPI_GetData(&readStatus);
 129   1              //printf("b\n");
 130   1              *status = readStatus[0];
 131   1              return TRUE;
 132   1      }
 133          
 134          /*
 135           *--------------------------------------------------------------------------------
 136           * BOOL SPI_ByteWrite(U16_T addrOfMem, U8_T byteData)
 137           * Purpose : Write one byte data into spi devices.
 138           * Params  : addrOfMem - address of accessing.
 139           *           byteData - data to be written.
 140           * Returns : TRUE - successful.
 141           * Note    :
 142           *--------------------------------------------------------------------------------
 143           */
 144          
 145          BOOL SPI_ByteWrite(U8_T byteData)
 146          {
 147   1              U8_T    byteWrite;
 148   1      
 149   1              byteWrite = byteData;
 150   1              SPI_FlagEnb(SPI_BUSY);
 151   1              SPI_MstXmit(&byteWrite,8, SPI_NORMAL_LEN|SPI_GO_BSY);
 152   1              while (SPI_FlagChk(SPI_BUSY)) {}
 153   1              
 154   1              return TRUE;
 155   1      }
 156          
 157           
 158          /* End of spiapi.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    306    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
